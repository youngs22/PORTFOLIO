[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n2"
  },
  {
    "objectID": "LS bigdata school.html",
    "href": "LS bigdata school.html",
    "title": "LS 빅데이터 스쿨",
    "section": "",
    "text": "SHOW this site"
  },
  {
    "objectID": "hw1.html",
    "href": "hw1.html",
    "title": "homework1",
    "section": "",
    "text": "2024-07-15\n\n84 page\n\nQ1.\n\nimport pandas as pd\nx=pd.DataFrame({\"제품\":[\"사과\",\"딸기\",\"수박\"],\n                \"가격\":[1800,1500,3000],\n                \"판매량\":[24,38,13]})\nx\n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13\n\n\n\n\n\n\n\n\n\nQ2.\n\nprint(\"가격 평균 : \",sum(x[\"가격\"])/3)\nprint(\"판매량 평균 : \",sum(x[\"판매량\"])/3)\n\n가격 평균 :  2100.0\n판매량 평균 :  25.0\n\n\n\n\n\n115 page\n\nimport pandas as pd\nimport pydataset\ndf=pd.read_csv(\"mpg.csv\")\ndf_mpg=df.copy()\n\ndf_mpg=df_mpg.rename(columns={\"cty\":\"city\"})\ndf_mpg=df_mpg.rename(columns={\"hwy\":\"highway\"})\ndf_mpg\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncity\nhighway\nfl\ncategory\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n\n\n\n\n234 rows × 11 columns\n\n\n\n\n\n130 page\n\nQ1.\n\nimport pandas as pd\nimport pydataset\n\ndf_midwest=pd.read_csv('midwest.csv')\ndf_midwest.head()\ndf_midwest.tail()\ndf_midwest.shape\ndf_midwest.info()\ndf_midwest.describe()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 437 entries, 0 to 436\nData columns (total 28 columns):\n #   Column                Non-Null Count  Dtype  \n---  ------                --------------  -----  \n 0   PID                   437 non-null    int64  \n 1   county                437 non-null    object \n 2   state                 437 non-null    object \n 3   area                  437 non-null    float64\n 4   poptotal              437 non-null    int64  \n 5   popdensity            437 non-null    float64\n 6   popwhite              437 non-null    int64  \n 7   popblack              437 non-null    int64  \n 8   popamerindian         437 non-null    int64  \n 9   popasian              437 non-null    int64  \n 10  popother              437 non-null    int64  \n 11  percwhite             437 non-null    float64\n 12  percblack             437 non-null    float64\n 13  percamerindan         437 non-null    float64\n 14  percasian             437 non-null    float64\n 15  percother             437 non-null    float64\n 16  popadults             437 non-null    int64  \n 17  perchsd               437 non-null    float64\n 18  percollege            437 non-null    float64\n 19  percprof              437 non-null    float64\n 20  poppovertyknown       437 non-null    int64  \n 21  percpovertyknown      437 non-null    float64\n 22  percbelowpoverty      437 non-null    float64\n 23  percchildbelowpovert  437 non-null    float64\n 24  percadultpoverty      437 non-null    float64\n 25  percelderlypoverty    437 non-null    float64\n 26  inmetro               437 non-null    int64  \n 27  category              437 non-null    object \ndtypes: float64(15), int64(10), object(3)\nmemory usage: 95.7+ KB\n\n\n\n\n\n\n\n\n\nPID\narea\npoptotal\npopdensity\npopwhite\npopblack\npopamerindian\npopasian\npopother\npercwhite\n...\nperchsd\npercollege\npercprof\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\n\n\n\n\ncount\n437.000000\n437.000000\n4.370000e+02\n437.000000\n4.370000e+02\n4.370000e+02\n437.000000\n437.000000\n437.000000\n437.000000\n...\n437.000000\n437.000000\n437.000000\n4.370000e+02\n437.000000\n437.000000\n437.000000\n437.000000\n437.000000\n437.000000\n\n\nmean\n1437.338673\n0.033169\n9.613030e+04\n3097.742985\n8.183992e+04\n1.102388e+04\n343.109840\n1310.464531\n1612.931350\n95.558441\n...\n73.965546\n18.272736\n4.447259\n9.364228e+04\n97.110267\n12.510505\n16.447464\n10.918798\n11.389043\n0.343249\n\n\nstd\n876.390266\n0.014679\n2.981705e+05\n7664.751786\n2.001966e+05\n7.895827e+04\n868.926751\n9518.394189\n18526.540699\n7.087358\n...\n5.843177\n6.261908\n2.408427\n2.932351e+05\n2.749863\n5.150155\n7.228634\n5.109166\n3.661259\n0.475338\n\n\nmin\n561.000000\n0.005000\n1.701000e+03\n85.050000\n4.160000e+02\n0.000000e+00\n4.000000\n0.000000\n0.000000\n10.694087\n...\n46.912261\n7.336108\n0.520291\n1.696000e+03\n80.902441\n2.180168\n1.918955\n1.938504\n3.547067\n0.000000\n\n\n25%\n670.000000\n0.024000\n1.884000e+04\n622.407407\n1.863000e+04\n2.900000e+01\n44.000000\n35.000000\n20.000000\n94.886032\n...\n71.325329\n14.113725\n2.997957\n1.836400e+04\n96.894572\n9.198715\n11.624088\n7.668009\n8.911763\n0.000000\n\n\n50%\n1221.000000\n0.030000\n3.532400e+04\n1156.208330\n3.447100e+04\n2.010000e+02\n94.000000\n102.000000\n66.000000\n98.032742\n...\n74.246891\n16.797562\n3.814239\n3.378800e+04\n98.169562\n11.822313\n15.270164\n10.007610\n10.869119\n0.000000\n\n\n75%\n2059.000000\n0.038000\n7.565100e+04\n2330.000000\n7.296800e+04\n1.291000e+03\n288.000000\n401.000000\n345.000000\n99.074935\n...\n77.195345\n20.549893\n4.949324\n7.284000e+04\n98.598636\n15.133226\n20.351878\n13.182182\n13.412162\n1.000000\n\n\nmax\n3052.000000\n0.110000\n5.105067e+06\n88018.396600\n3.204947e+06\n1.317147e+06\n10289.000000\n188565.000000\n384119.000000\n99.822821\n...\n88.898674\n48.078510\n20.791321\n5.023523e+06\n99.860384\n48.691099\n64.308477\n43.312464\n31.161972\n1.000000\n\n\n\n\n8 rows × 25 columns\n\n\n\n\n\nQ2.\n\ndf_midwest=df_midwest.rename(columns={\"poptotal\":\"total\"})\ndf_midwest=df_midwest.rename(columns={\"popasian\":\"asian\"})\ndf_midwest[[\"total\",\"asian\"]]\n\n\n\n\n\n\n\n\ntotal\nasian\n\n\n\n\n0\n66090\n249\n\n\n1\n10626\n48\n\n\n2\n14991\n16\n\n\n3\n30806\n150\n\n\n4\n5836\n5\n\n\n...\n...\n...\n\n\n432\n304715\n2699\n\n\n433\n46104\n92\n\n\n434\n19385\n43\n\n\n435\n140320\n1728\n\n\n436\n73605\n722\n\n\n\n\n437 rows × 2 columns\n\n\n\n\n\nQ3.\n\ndf_midwest[\"asian_ptg\"]= df_midwest[\"asian\"] / df_midwest[\"total\"] * 100\ndf_midwest\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\ntotal\npopdensity\npopwhite\npopblack\npopamerindian\nasian\n...\npercprof\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\nasian_ptg\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n4.355859\n63628\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n0.376759\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n2.870315\n10529\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n0.451722\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n4.488572\n14235\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n0.106731\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n4.197800\n30337\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n0.486918\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n3.367680\n4815\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n0.085675\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n432\n3048\nWAUKESHA\nWI\n0.034\n304715\n8962.205880\n298313\n1096\n672\n2699\n...\n7.667090\n299802\n98.387674\n3.121060\n3.785820\n2.590061\n4.085479\n1\nHLU\n0.885746\n\n\n433\n3049\nWAUPACA\nWI\n0.045\n46104\n1024.533330\n45695\n22\n125\n92\n...\n3.138596\n44412\n96.330036\n8.488697\n10.071411\n6.953799\n10.338641\n0\nAAR\n0.199549\n\n\n434\n3050\nWAUSHARA\nWI\n0.037\n19385\n523.918919\n19094\n29\n70\n43\n...\n2.620907\n19163\n98.854785\n13.786985\n20.050708\n11.695784\n11.804558\n0\nAAR\n0.221821\n\n\n435\n3051\nWINNEBAGO\nWI\n0.035\n140320\n4009.142860\n136822\n697\n685\n1728\n...\n5.659847\n133950\n95.460376\n8.804031\n10.592031\n8.660587\n6.661094\n1\nHAU\n1.231471\n\n\n436\n3052\nWOOD\nWI\n0.048\n73605\n1533.437500\n72157\n90\n481\n722\n...\n4.583725\n72685\n98.750085\n8.525831\n11.162997\n7.375656\n7.882918\n0\nAAR\n0.980912\n\n\n\n\n437 rows × 29 columns\n\n\n\n\n\nQ4.\n\nimport numpy as np\n\nasian_ptg_mean= sum(df_midwest[\"asian_ptg\"])/437\ndf_midwest[\"large_small\"]=np.where(df_midwest[\"asian_ptg\"] &gt; asian_ptg_mean, \"large\", \"small\")\ndf_midwest\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\ntotal\npopdensity\npopwhite\npopblack\npopamerindian\nasian\n...\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\nasian_ptg\nlarge_small\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n63628\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n0.376759\nsmall\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n10529\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n0.451722\nsmall\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n14235\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n0.106731\nsmall\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n30337\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n0.486918\nsmall\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n4815\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n0.085675\nsmall\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n432\n3048\nWAUKESHA\nWI\n0.034\n304715\n8962.205880\n298313\n1096\n672\n2699\n...\n299802\n98.387674\n3.121060\n3.785820\n2.590061\n4.085479\n1\nHLU\n0.885746\nlarge\n\n\n433\n3049\nWAUPACA\nWI\n0.045\n46104\n1024.533330\n45695\n22\n125\n92\n...\n44412\n96.330036\n8.488697\n10.071411\n6.953799\n10.338641\n0\nAAR\n0.199549\nsmall\n\n\n434\n3050\nWAUSHARA\nWI\n0.037\n19385\n523.918919\n19094\n29\n70\n43\n...\n19163\n98.854785\n13.786985\n20.050708\n11.695784\n11.804558\n0\nAAR\n0.221821\nsmall\n\n\n435\n3051\nWINNEBAGO\nWI\n0.035\n140320\n4009.142860\n136822\n697\n685\n1728\n...\n133950\n95.460376\n8.804031\n10.592031\n8.660587\n6.661094\n1\nHAU\n1.231471\nlarge\n\n\n436\n3052\nWOOD\nWI\n0.048\n73605\n1533.437500\n72157\n90\n481\n722\n...\n72685\n98.750085\n8.525831\n11.162997\n7.375656\n7.882918\n0\nAAR\n0.980912\nlarge\n\n\n\n\n437 rows × 30 columns\n\n\n\n\n\nQ5.\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nplt.clf()\nlarge_small_count = df_midwest[\"large_small\"].value_counts()\nlarge_small_count.plot.bar(rot=0,color=\"red\")\nplt.show()\n\n# 또다른 그래프 만드는 방법\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nplt.clf()\nsns.countplot(data=df_midwest, x=\"large_small\", color=\"yellow\", dodge=True)\nplt.show()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PORTFOLIO_Youna",
    "section": "",
    "text": "안녕하세요, 유나의 포트폴리오 홈페이지에 오신 것을 환영합니다.  빅데이터 프로젝트 관련 게시글을 작성하고 있습니다."
  },
  {
    "objectID": "hw2.html",
    "href": "hw2.html",
    "title": "homework2",
    "section": "",
    "text": "2024-07-16"
  },
  {
    "objectID": "hw2.html#page",
    "href": "hw2.html#page",
    "title": "homework2",
    "section": "144 page",
    "text": "144 page\n\nQ1\n\nimport pandas as pd\nimport pydataset\n\nmpg = pydataset.data(\"mpg\")\n\nmpg.head()\n\ndispl4 =mpg.query(\"displ&lt;=4\")\ndispl5 =mpg.query(\"displ&gt;=5\")\n\ndispl4[\"hwy\"].mean()\ndispl5[\"hwy\"].mean()\n\ndispl5[\"hwy\"].mean() &lt; displ4[\"hwy\"].mean()\n\nnp.True_\n\n\n\n\nQ2\n\nmpg_audi = mpg.query(\"manufacturer == 'audi'\")\nmpg_toyota =mpg.query(\"manufacturer == 'toyota'\")\n\n\nmpg_audi[\"cty\"].mean()\nmpg_toyota[\"cty\"].mean()\n\nmpg_audi[\"cty\"].mean() &lt; mpg_toyota[\"cty\"].mean()\n\nnp.True_\n\n\n\n\nQ3\n\nmpg2=mpg.query(\"manufacturer=='chevrolet'|manufacturer=='ford'|manufacturer=='honda'\")\nmpg2[\"hwy\"].mean()\n\nnp.float64(22.50943396226415)"
  },
  {
    "objectID": "hw2.html#page-1",
    "href": "hw2.html#page-1",
    "title": "homework2",
    "section": "153 page",
    "text": "153 page\n\nQ1\n\nmpg_audi = mpg.query(\"manufacturer=='audi'\")\nmpg_audi.sort_values(\"hwy\",ascending = False).head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\n\n\n\n\n3\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n4\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n2\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n10\naudi\na4 quattro\n2.0\n2008\n4\nmanual(m6)\n4\n20\n28\np\ncompact"
  },
  {
    "objectID": "hw2.html#page-2",
    "href": "hw2.html#page-2",
    "title": "homework2",
    "section": "158 page",
    "text": "158 page\n\nQ1\n\nimport pandas as pd\nimport pydataset\n\nmpg = pydataset.data(\"mpg\")\n\nmpg_copy = mpg.copy()\nmpg_copy\n\nmpg_copy = mpg_copy.assign(sum_cty_hwy = mpg_copy[\"cty\"] + mpg_copy[\"hwy\"])\nmpg_copy.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\nsum_cty_hwy\n\n\n\n\n1\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n\n\n2\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n\n\n3\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n\n\n4\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n\n\n5\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n\n\n\n\n\n\n\n\n\nQ2\n\nmpg_copy = mpg_copy.assign(mean_cty_hwy = mpg_copy[\"sum_cty_hwy\"] / 2)\nmpg_copy\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\nsum_cty_hwy\nmean_cty_hwy\n\n\n\n\n1\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n23.5\n\n\n2\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n25.0\n\n\n3\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n25.5\n\n\n4\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n25.5\n\n\n5\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n21.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n47\n23.5\n\n\n231\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n50\n25.0\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n42\n21.0\n\n\n233\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n44\n22.0\n\n\n234\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n43\n21.5\n\n\n\n\n234 rows × 13 columns\n\n\n\n\n\nQ3\n\nmpg_copy.sort_values(\"mean_cty_hwy\", ascending = False).head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\nsum_cty_hwy\nmean_cty_hwy\n\n\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n213\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n223\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0\n\n\n\n\n\n\n\n\n\nQ4\n\nmpg.assign(\n    sum_cty_hwy = mpg[\"cty\"] + mpg[\"hwy\"],\n    mean_cty_hwy = mpg[\"cty\"] + mpg[\"hwy\"] / 2 )\\\n    .sort_values(\"mean_cty_hwy\", ascending = False)\\\n    .head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\nsum_cty_hwy\nmean_cty_hwy\n\n\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n57.0\n\n\n213\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n55.0\n\n\n223\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n49.5\n\n\n\n\n\n\n\n\n\nQ4 또 다르게\n\nmpg.assign(\n    total = lambda x: x[\"cty\"] + x[\"hwy\"],\n    mean_cty_hwy = lambda x: x[\"total\"] / 2 )\\\n    .sort_values(\"mean_cty_hwy\", ascending = False)\\\n    .head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\ntotal\nmean_cty_hwy\n\n\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n213\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n223\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "Blog\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLS 빅데이터 스쿨 homework6\n\n\n\n\n\n\nbigdata\n\n\n\n\n\n\n\n\n\nAug 5, 2024\n\n\nyouna\n\n\n\n\n\n\n\n\n\n\n\n\nLS 빅데이터 스쿨 homework5\n\n\n\n\n\n\nbigdata\n\n\n\n\n\n\n\n\n\nJul 30, 2024\n\n\nyouna\n\n\n\n\n\n\n\n\n\n\n\n\nLS 빅데이터 스쿨 homework4\n\n\n\n\n\n\nbigdata\n\n\n\n\n\n\n\n\n\nJul 29, 2024\n\n\nyouna\n\n\n\n\n\n\n\n\n\n\n\n\nLS 빅데이터 스쿨 homework3\n\n\n\n\n\n\nbigdata\n\n\n\n\n\n\n\n\n\nJul 25, 2024\n\n\nyouna\n\n\n\n\n\n\n\n\n\n\n\n\nLS 빅데이터 스쿨 homework_etc\n\n\n\n\n\n\nbigdata\n\n\n\n\n\n\n\n\n\nJul 22, 2024\n\n\nyouna\n\n\n\n\n\n\n\n\n\n\n\n\nLS 빅데이터 스쿨 homework2\n\n\n\n\n\n\nbigdata\n\n\n\n\n\n\n\n\n\nJul 16, 2024\n\n\nyouna\n\n\n\n\n\n\n\n\n\n\n\n\nLS 빅데이터 스쿨 homework1\n\n\n\n\n\n\nbigdata\n\n\n\n\n\n\n\n\n\nJul 15, 2024\n\n\nyouna\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/hw1/index.html",
    "href": "posts/hw1/index.html",
    "title": "LS 빅데이터 스쿨 homework1",
    "section": "",
    "text": "import pandas as pd\nx=pd.DataFrame({\"제품\":[\"사과\",\"딸기\",\"수박\"],\n                \"가격\":[1800,1500,3000],\n                \"판매량\":[24,38,13]})\nx\n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13\n\n\n\n\n\n\n\n\n\n\n\nprint(\"가격 평균 : \",sum(x[\"가격\"])/3)\nprint(\"판매량 평균 : \",sum(x[\"판매량\"])/3)\n\n가격 평균 :  2100.0\n판매량 평균 :  25.0"
  },
  {
    "objectID": "posts/hw2/index.html",
    "href": "posts/hw2/index.html",
    "title": "LS 빅데이터 스쿨 homework2",
    "section": "",
    "text": "import pandas as pd\nimport pydataset\n\nmpg = pydataset.data(\"mpg\")\n\nmpg.head()\n\ndispl4 =mpg.query(\"displ&lt;=4\")\ndispl5 =mpg.query(\"displ&gt;=5\")\n\ndispl4[\"hwy\"].mean()\ndispl5[\"hwy\"].mean()\n\ndispl5[\"hwy\"].mean() &lt; displ4[\"hwy\"].mean()\n\nnp.True_\n\n\n\n\n\n\nmpg_audi = mpg.query(\"manufacturer == 'audi'\")\nmpg_toyota =mpg.query(\"manufacturer == 'toyota'\")\n\n\nmpg_audi[\"cty\"].mean()\nmpg_toyota[\"cty\"].mean()\n\nmpg_audi[\"cty\"].mean() &lt; mpg_toyota[\"cty\"].mean()\n\nnp.True_\n\n\n\n\n\n\nmpg2=mpg.query(\"manufacturer=='chevrolet'|manufacturer=='ford'|manufacturer=='honda'\")\nmpg2[\"hwy\"].mean()\n\nnp.float64(22.50943396226415)"
  },
  {
    "objectID": "posts/hw2/index.html#page",
    "href": "posts/hw2/index.html#page",
    "title": "LS 빅데이터 스쿨 homework2",
    "section": "",
    "text": "import pandas as pd\nimport pydataset\n\nmpg = pydataset.data(\"mpg\")\n\nmpg.head()\n\ndispl4 =mpg.query(\"displ&lt;=4\")\ndispl5 =mpg.query(\"displ&gt;=5\")\n\ndispl4[\"hwy\"].mean()\ndispl5[\"hwy\"].mean()\n\ndispl5[\"hwy\"].mean() &lt; displ4[\"hwy\"].mean()\n\nnp.True_\n\n\n\n\n\n\nmpg_audi = mpg.query(\"manufacturer == 'audi'\")\nmpg_toyota =mpg.query(\"manufacturer == 'toyota'\")\n\n\nmpg_audi[\"cty\"].mean()\nmpg_toyota[\"cty\"].mean()\n\nmpg_audi[\"cty\"].mean() &lt; mpg_toyota[\"cty\"].mean()\n\nnp.True_\n\n\n\n\n\n\nmpg2=mpg.query(\"manufacturer=='chevrolet'|manufacturer=='ford'|manufacturer=='honda'\")\nmpg2[\"hwy\"].mean()\n\nnp.float64(22.50943396226415)"
  },
  {
    "objectID": "posts/hw2/index.html#page-1",
    "href": "posts/hw2/index.html#page-1",
    "title": "LS 빅데이터 스쿨 homework2",
    "section": "153 page",
    "text": "153 page\n\nQ1.\n\nmpg_audi = mpg.query(\"manufacturer=='audi'\")\nmpg_audi.sort_values(\"hwy\",ascending = False).head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\n\n\n\n\n3\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n4\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n2\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n10\naudi\na4 quattro\n2.0\n2008\n4\nmanual(m6)\n4\n20\n28\np\ncompact"
  },
  {
    "objectID": "posts/hw2/index.html#page-2",
    "href": "posts/hw2/index.html#page-2",
    "title": "LS 빅데이터 스쿨 homework2",
    "section": "158 page",
    "text": "158 page\n\nQ1.\n\nimport pandas as pd\nimport pydataset\n\nmpg = pydataset.data(\"mpg\")\n\nmpg_copy = mpg.copy()\nmpg_copy\n\nmpg_copy = mpg_copy.assign(sum_cty_hwy = mpg_copy[\"cty\"] + mpg_copy[\"hwy\"])\nmpg_copy.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\nsum_cty_hwy\n\n\n\n\n1\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n\n\n2\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n\n\n3\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n\n\n4\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n\n\n5\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n\n\n\n\n\n\n\n\n\nQ2.\n\nmpg_copy = mpg_copy.assign(mean_cty_hwy = mpg_copy[\"sum_cty_hwy\"] / 2)\nmpg_copy\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\nsum_cty_hwy\nmean_cty_hwy\n\n\n\n\n1\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n23.5\n\n\n2\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n25.0\n\n\n3\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n25.5\n\n\n4\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n25.5\n\n\n5\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n21.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n47\n23.5\n\n\n231\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n50\n25.0\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n42\n21.0\n\n\n233\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n44\n22.0\n\n\n234\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n43\n21.5\n\n\n\n\n234 rows × 13 columns\n\n\n\n\n\nQ3.\n\nmpg_copy.sort_values(\"mean_cty_hwy\", ascending = False).head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\nsum_cty_hwy\nmean_cty_hwy\n\n\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n213\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n223\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0\n\n\n\n\n\n\n\n\n\nQ4.\n\nmpg.assign(\n    sum_cty_hwy = mpg[\"cty\"] + mpg[\"hwy\"],\n    mean_cty_hwy = mpg[\"cty\"] + mpg[\"hwy\"] / 2 )\\\n    .sort_values(\"mean_cty_hwy\", ascending = False)\\\n    .head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\nsum_cty_hwy\nmean_cty_hwy\n\n\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n57.0\n\n\n213\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n55.0\n\n\n223\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n49.5\n\n\n\n\n\n\n\n\n\nQ4. (책대로)\n\nmpg.assign(\n    total = lambda x: x[\"cty\"] + x[\"hwy\"],\n    mean_cty_hwy = lambda x: x[\"total\"] / 2 )\\\n    .sort_values(\"mean_cty_hwy\", ascending = False)\\\n    .head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\ntotal\nmean_cty_hwy\n\n\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n213\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n223\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0"
  },
  {
    "objectID": "posts/hw1/index.html#page",
    "href": "posts/hw1/index.html#page",
    "title": "LS 빅데이터 스쿨 homework1",
    "section": "",
    "text": "import pandas as pd\nx=pd.DataFrame({\"제품\":[\"사과\",\"딸기\",\"수박\"],\n                \"가격\":[1800,1500,3000],\n                \"판매량\":[24,38,13]})\nx\n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13\n\n\n\n\n\n\n\n\n\n\n\nprint(\"가격 평균 : \",sum(x[\"가격\"])/3)\nprint(\"판매량 평균 : \",sum(x[\"판매량\"])/3)\n\n가격 평균 :  2100.0\n판매량 평균 :  25.0"
  },
  {
    "objectID": "posts/hw1/index.html#page-1",
    "href": "posts/hw1/index.html#page-1",
    "title": "LS 빅데이터 스쿨 homework1",
    "section": "115 page",
    "text": "115 page\n\nimport pandas as pd\nimport pydataset\ndf=pd.read_csv(\"C:/Users/USER/Documents/LS빅데이터스쿨/PORTFOLIO/data/mpg.csv\")\ndf_mpg=df.copy()\n\ndf_mpg=df_mpg.rename(columns={\"cty\":\"city\"})\ndf_mpg=df_mpg.rename(columns={\"hwy\":\"highway\"})\ndf_mpg\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncity\nhighway\nfl\ncategory\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n\n\n\n\n234 rows × 11 columns"
  },
  {
    "objectID": "posts/hw1/index.html#page-2",
    "href": "posts/hw1/index.html#page-2",
    "title": "LS 빅데이터 스쿨 homework1",
    "section": "130 page",
    "text": "130 page\n\nQ1.\n\nimport pandas as pd\nimport pydataset\n\ndf_midwest=pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/PORTFOLIO/data/midwest.csv')\ndf_midwest.head()\ndf_midwest.tail()\ndf_midwest.shape\ndf_midwest.info()\ndf_midwest.describe()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 437 entries, 0 to 436\nData columns (total 28 columns):\n #   Column                Non-Null Count  Dtype  \n---  ------                --------------  -----  \n 0   PID                   437 non-null    int64  \n 1   county                437 non-null    object \n 2   state                 437 non-null    object \n 3   area                  437 non-null    float64\n 4   poptotal              437 non-null    int64  \n 5   popdensity            437 non-null    float64\n 6   popwhite              437 non-null    int64  \n 7   popblack              437 non-null    int64  \n 8   popamerindian         437 non-null    int64  \n 9   popasian              437 non-null    int64  \n 10  popother              437 non-null    int64  \n 11  percwhite             437 non-null    float64\n 12  percblack             437 non-null    float64\n 13  percamerindan         437 non-null    float64\n 14  percasian             437 non-null    float64\n 15  percother             437 non-null    float64\n 16  popadults             437 non-null    int64  \n 17  perchsd               437 non-null    float64\n 18  percollege            437 non-null    float64\n 19  percprof              437 non-null    float64\n 20  poppovertyknown       437 non-null    int64  \n 21  percpovertyknown      437 non-null    float64\n 22  percbelowpoverty      437 non-null    float64\n 23  percchildbelowpovert  437 non-null    float64\n 24  percadultpoverty      437 non-null    float64\n 25  percelderlypoverty    437 non-null    float64\n 26  inmetro               437 non-null    int64  \n 27  category              437 non-null    object \ndtypes: float64(15), int64(10), object(3)\nmemory usage: 95.7+ KB\n\n\n\n\n\n\n\n\n\nPID\narea\npoptotal\npopdensity\npopwhite\npopblack\npopamerindian\npopasian\npopother\npercwhite\n...\nperchsd\npercollege\npercprof\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\n\n\n\n\ncount\n437.000000\n437.000000\n4.370000e+02\n437.000000\n4.370000e+02\n4.370000e+02\n437.000000\n437.000000\n437.000000\n437.000000\n...\n437.000000\n437.000000\n437.000000\n4.370000e+02\n437.000000\n437.000000\n437.000000\n437.000000\n437.000000\n437.000000\n\n\nmean\n1437.338673\n0.033169\n9.613030e+04\n3097.742985\n8.183992e+04\n1.102388e+04\n343.109840\n1310.464531\n1612.931350\n95.558441\n...\n73.965546\n18.272736\n4.447259\n9.364228e+04\n97.110267\n12.510505\n16.447464\n10.918798\n11.389043\n0.343249\n\n\nstd\n876.390266\n0.014679\n2.981705e+05\n7664.751786\n2.001966e+05\n7.895827e+04\n868.926751\n9518.394189\n18526.540699\n7.087358\n...\n5.843177\n6.261908\n2.408427\n2.932351e+05\n2.749863\n5.150155\n7.228634\n5.109166\n3.661259\n0.475338\n\n\nmin\n561.000000\n0.005000\n1.701000e+03\n85.050000\n4.160000e+02\n0.000000e+00\n4.000000\n0.000000\n0.000000\n10.694087\n...\n46.912261\n7.336108\n0.520291\n1.696000e+03\n80.902441\n2.180168\n1.918955\n1.938504\n3.547067\n0.000000\n\n\n25%\n670.000000\n0.024000\n1.884000e+04\n622.407407\n1.863000e+04\n2.900000e+01\n44.000000\n35.000000\n20.000000\n94.886032\n...\n71.325329\n14.113725\n2.997957\n1.836400e+04\n96.894572\n9.198715\n11.624088\n7.668009\n8.911763\n0.000000\n\n\n50%\n1221.000000\n0.030000\n3.532400e+04\n1156.208330\n3.447100e+04\n2.010000e+02\n94.000000\n102.000000\n66.000000\n98.032742\n...\n74.246891\n16.797562\n3.814239\n3.378800e+04\n98.169562\n11.822313\n15.270164\n10.007610\n10.869119\n0.000000\n\n\n75%\n2059.000000\n0.038000\n7.565100e+04\n2330.000000\n7.296800e+04\n1.291000e+03\n288.000000\n401.000000\n345.000000\n99.074935\n...\n77.195345\n20.549893\n4.949324\n7.284000e+04\n98.598636\n15.133226\n20.351878\n13.182182\n13.412162\n1.000000\n\n\nmax\n3052.000000\n0.110000\n5.105067e+06\n88018.396600\n3.204947e+06\n1.317147e+06\n10289.000000\n188565.000000\n384119.000000\n99.822821\n...\n88.898674\n48.078510\n20.791321\n5.023523e+06\n99.860384\n48.691099\n64.308477\n43.312464\n31.161972\n1.000000\n\n\n\n\n8 rows × 25 columns\n\n\n\n\n\nQ2.\n\ndf_midwest=df_midwest.rename(columns={\"poptotal\":\"total\"})\ndf_midwest=df_midwest.rename(columns={\"popasian\":\"asian\"})\ndf_midwest[[\"total\",\"asian\"]]\n\n\n\n\n\n\n\n\ntotal\nasian\n\n\n\n\n0\n66090\n249\n\n\n1\n10626\n48\n\n\n2\n14991\n16\n\n\n3\n30806\n150\n\n\n4\n5836\n5\n\n\n...\n...\n...\n\n\n432\n304715\n2699\n\n\n433\n46104\n92\n\n\n434\n19385\n43\n\n\n435\n140320\n1728\n\n\n436\n73605\n722\n\n\n\n\n437 rows × 2 columns\n\n\n\n\n\nQ3.\n\ndf_midwest[\"asian_ptg\"]= df_midwest[\"asian\"] / df_midwest[\"total\"] * 100\ndf_midwest\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\ntotal\npopdensity\npopwhite\npopblack\npopamerindian\nasian\n...\npercprof\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\nasian_ptg\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n4.355859\n63628\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n0.376759\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n2.870315\n10529\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n0.451722\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n4.488572\n14235\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n0.106731\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n4.197800\n30337\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n0.486918\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n3.367680\n4815\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n0.085675\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n432\n3048\nWAUKESHA\nWI\n0.034\n304715\n8962.205880\n298313\n1096\n672\n2699\n...\n7.667090\n299802\n98.387674\n3.121060\n3.785820\n2.590061\n4.085479\n1\nHLU\n0.885746\n\n\n433\n3049\nWAUPACA\nWI\n0.045\n46104\n1024.533330\n45695\n22\n125\n92\n...\n3.138596\n44412\n96.330036\n8.488697\n10.071411\n6.953799\n10.338641\n0\nAAR\n0.199549\n\n\n434\n3050\nWAUSHARA\nWI\n0.037\n19385\n523.918919\n19094\n29\n70\n43\n...\n2.620907\n19163\n98.854785\n13.786985\n20.050708\n11.695784\n11.804558\n0\nAAR\n0.221821\n\n\n435\n3051\nWINNEBAGO\nWI\n0.035\n140320\n4009.142860\n136822\n697\n685\n1728\n...\n5.659847\n133950\n95.460376\n8.804031\n10.592031\n8.660587\n6.661094\n1\nHAU\n1.231471\n\n\n436\n3052\nWOOD\nWI\n0.048\n73605\n1533.437500\n72157\n90\n481\n722\n...\n4.583725\n72685\n98.750085\n8.525831\n11.162997\n7.375656\n7.882918\n0\nAAR\n0.980912\n\n\n\n\n437 rows × 29 columns\n\n\n\n\n\nQ4.\n\nimport numpy as np\n\nasian_ptg_mean= sum(df_midwest[\"asian_ptg\"])/437\ndf_midwest[\"large_small\"]=np.where(df_midwest[\"asian_ptg\"] &gt; asian_ptg_mean, \"large\", \"small\")\ndf_midwest\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\ntotal\npopdensity\npopwhite\npopblack\npopamerindian\nasian\n...\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\nasian_ptg\nlarge_small\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n63628\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n0.376759\nsmall\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n10529\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n0.451722\nsmall\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n14235\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n0.106731\nsmall\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n30337\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n0.486918\nsmall\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n4815\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n0.085675\nsmall\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n432\n3048\nWAUKESHA\nWI\n0.034\n304715\n8962.205880\n298313\n1096\n672\n2699\n...\n299802\n98.387674\n3.121060\n3.785820\n2.590061\n4.085479\n1\nHLU\n0.885746\nlarge\n\n\n433\n3049\nWAUPACA\nWI\n0.045\n46104\n1024.533330\n45695\n22\n125\n92\n...\n44412\n96.330036\n8.488697\n10.071411\n6.953799\n10.338641\n0\nAAR\n0.199549\nsmall\n\n\n434\n3050\nWAUSHARA\nWI\n0.037\n19385\n523.918919\n19094\n29\n70\n43\n...\n19163\n98.854785\n13.786985\n20.050708\n11.695784\n11.804558\n0\nAAR\n0.221821\nsmall\n\n\n435\n3051\nWINNEBAGO\nWI\n0.035\n140320\n4009.142860\n136822\n697\n685\n1728\n...\n133950\n95.460376\n8.804031\n10.592031\n8.660587\n6.661094\n1\nHAU\n1.231471\nlarge\n\n\n436\n3052\nWOOD\nWI\n0.048\n73605\n1533.437500\n72157\n90\n481\n722\n...\n72685\n98.750085\n8.525831\n11.162997\n7.375656\n7.882918\n0\nAAR\n0.980912\nlarge\n\n\n\n\n437 rows × 30 columns\n\n\n\n\n\nQ5.\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nplt.clf()\nlarge_small_count = df_midwest[\"large_small\"].value_counts()\nlarge_small_count.plot.bar(rot=0,color=\"red\")\nplt.show()\n\n# 또다른 그래프 만드는 방법\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nplt.clf()\nsns.countplot(data=df_midwest, x=\"large_small\", color=\"yellow\", dodge=True)\nplt.show()"
  },
  {
    "objectID": "posts/hw3/index.html",
    "href": "posts/hw3/index.html",
    "title": "LS 빅데이터 스쿨 homework3",
    "section": "",
    "text": "# 정규분포 pdf 값을 계산하는 자신만의\n# 파이썬 함수를 정의하고, \n# 정규분포 mu = 3, sigma = 2 의 pdf를 그릴 것.\n# 정규분포 pdf 값을 계산하는 자신만의\n# 파이썬 함수를 정의하고, \n# 정규분포 mu = 3, sigma = 2 의 pdf를 그릴 것.\nimport math\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\nk = np.linspace(-4, 10, 100)\n\ndef normal_pdf(x, mu, sigma):\n    part1=(sigma * (math.sqrt(2*math.pi)))**(-1)\n    part2=np.exp(-(x-mu)**2/(2*sigma**2))\n    return part1 * part2\n\ny = normal_pdf(k, mu=3, sigma=2)\nplt.plot(k, y, color=\"pink\")\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;"
  },
  {
    "objectID": "posts/hw3/index.html#page",
    "href": "posts/hw3/index.html#page",
    "title": "LS 빅데이터 스쿨 homework3",
    "section": "204 page",
    "text": "204 page\n\nQ1.\n\nplt.clf()\nsns.scatterplot(data=mpg, x=\"cty\", y=\"hwy\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\nQ2.\n\nplt.clf()\nsns.scatterplot(data=midwest, x=\"poptotal\", y=\"popasian\")\\\n    .set(xlim = [0,500000], ylim = [0,10000])\nplt.show()"
  },
  {
    "objectID": "posts/hw3/index.html#page-1",
    "href": "posts/hw3/index.html#page-1",
    "title": "LS 빅데이터 스쿨 homework3",
    "section": "211 page",
    "text": "211 page\n\nQ1.\n\nmpg_suv = mpg.query(\"category == 'suv'\")\nmpg2=mpg_suv.groupby(\"manufacturer\", as_index = False)\\\n             .agg(cty_mean=(\"cty\",\"mean\"))\nmpg2=mpg2.sort_values(\"cty_mean\", ascending=False).head(5)\nplt.clf()\nsns.barplot(data=mpg2, x=\"manufacturer\", y=\"cty_mean\", hue=\"manufacturer\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\nQ2.\n\nmpg3=mpg.groupby(\"category\", as_index = False)\\\n             .agg(n=(\"category\",\"count\"))\nmpg3=mpg3.sort_values(\"n\", ascending=False)     \nplt.clf()\nsns.barplot(data=mpg3, x=\"category\", y=\"n\", hue=\"category\")\nplt.show()"
  },
  {
    "objectID": "posts/hw3/index.html#page-2",
    "href": "posts/hw3/index.html#page-2",
    "title": "LS 빅데이터 스쿨 homework3",
    "section": "316 page",
    "text": "316 page\n\nmpg데이터 활용\n\npx.scatter(data_frame=mpg, x=\"cty\", y=\"hwy\", color=\"drv\")\n\n                                                \n\n\n\n\nexam데이터 활용\n\npx.scatter(data_frame=exam, x=\"nclass\", y=\"math\", color=\"nclass\")"
  },
  {
    "objectID": "posts/hw3/index.html#q1.",
    "href": "posts/hw3/index.html#q1.",
    "title": "LS 빅데이터 스쿨 homework3",
    "section": "",
    "text": "# 정규분포 pdf 값을 계산하는 자신만의\n# 파이썬 함수를 정의하고, \n# 정규분포 mu = 3, sigma = 2 의 pdf를 그릴 것.\n# 정규분포 pdf 값을 계산하는 자신만의\n# 파이썬 함수를 정의하고, \n# 정규분포 mu = 3, sigma = 2 의 pdf를 그릴 것.\nimport math\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\nk = np.linspace(-4, 10, 100)\n\ndef normal_pdf(x, mu, sigma):\n    part1=(sigma * (math.sqrt(2*math.pi)))**(-1)\n    part2=np.exp(-(x-mu)**2/(2*sigma**2))\n    return part1 * part2\n\ny = normal_pdf(k, mu=3, sigma=2)\nplt.plot(k, y, color=\"pink\")\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;"
  },
  {
    "objectID": "posts/hw3/index.html#q2.",
    "href": "posts/hw3/index.html#q2.",
    "title": "LS 빅데이터 스쿨 homework3",
    "section": "Q2.",
    "text": "Q2.\n\n# 파이썬 scipy 패키지 사용해서 다음과 같은 확률을 구하시오.\n# X ~ N(2, 3^2)\n\nfrom scipy.stats import norm\n\n#1 P(X &lt; 3)\nnorm.cdf(3, loc=2, scale=3)\n\nnp.float64(0.6305586598182363)\n\n\n\n#2 P(2 &lt; X &lt; 5)\nnorm.cdf(5, loc=2, scale=3) - norm.cdf(2, loc=2, scale=3)\n\nnp.float64(0.3413447460685429)\n\n\n\n#3 P(X &lt; 3 or X &gt; 7)\nnorm.cdf(3, loc=2, scale=3) + (1-norm.cdf(7, loc=2, scale=3))\n\nnp.float64(0.678349012091051)"
  },
  {
    "objectID": "posts/hw3/index.html#q3.",
    "href": "posts/hw3/index.html#q3.",
    "title": "LS 빅데이터 스쿨 homework3",
    "section": "Q3.",
    "text": "Q3.\n\n# LS빅데이터 스쿨 학생들의 중간고사 점수는 \n# 평균이 30이고, 분산이 4인 정규분포\n# 상위 5%에 해당하는 학생 점수는?\n\nx=np.arange(28)\nscore = norm.ppf(0.95, loc=30, scale=2)\nscore\n\nnp.float64(33.28970725390295)"
  },
  {
    "objectID": "posts/hw3인줄 알았던것.html",
    "href": "posts/hw3인줄 알았던것.html",
    "title": "LS 빅데이터 스쿨 homework3",
    "section": "",
    "text": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\nmpg = pd.read_csv(\"C:/Users/USER/Documents/LS빅데이터스쿨/LsBigdata-project1/data/mpg.csv\")\n\nexam = pd.read_csv(\"C:/Users/USER/Documents/LS빅데이터스쿨/LsBigdata-project1/data/exam.csv\")\n\nmidwest = pd.read_csv(\"C:/Users/USER/Documents/LS빅데이터스쿨/LsBigdata-project1/data/midwest.csv\")"
  },
  {
    "objectID": "posts/hw3인줄 알았던것.html#page",
    "href": "posts/hw3인줄 알았던것.html#page",
    "title": "LS 빅데이터 스쿨 homework3",
    "section": "204 page",
    "text": "204 page\n\nQ1.\n\nplt.clf()\nsns.scatterplot(data=mpg, x=\"cty\", y=\"hwy\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\nQ2.\n\nplt.clf()\nsns.scatterplot(data=midwest, x=\"poptotal\", y=\"popasian\")\\\n    .set(xlim = [0,500000], ylim = [0,10000])\nplt.show()"
  },
  {
    "objectID": "posts/hw3인줄 알았던것.html#page-1",
    "href": "posts/hw3인줄 알았던것.html#page-1",
    "title": "LS 빅데이터 스쿨 homework3",
    "section": "211 page",
    "text": "211 page\n\nQ1.\n\nmpg_suv = mpg.query(\"category == 'suv'\")\nmpg2=mpg_suv.groupby(\"manufacturer\", as_index = False)\\\n             .agg(cty_mean=(\"cty\",\"mean\"))\nmpg2=mpg2.sort_values(\"cty_mean\", ascending=False).head(5)\nplt.clf()\nsns.barplot(data=mpg2, x=\"manufacturer\", y=\"cty_mean\", hue=\"manufacturer\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\nQ2.\n\nmpg3=mpg.groupby(\"category\", as_index = False)\\\n             .agg(n=(\"category\",\"count\"))\nmpg3=mpg3.sort_values(\"n\", ascending=False)     \nplt.clf()\nsns.barplot(data=mpg3, x=\"category\", y=\"n\", hue=\"category\")\nplt.show()"
  },
  {
    "objectID": "posts/hw3인줄 알았던것.html#page-2",
    "href": "posts/hw3인줄 알았던것.html#page-2",
    "title": "LS 빅데이터 스쿨 homework3",
    "section": "316 page",
    "text": "316 page\n\nmpg데이터 활용\n\npx.scatter(data_frame=mpg, x=\"cty\", y=\"hwy\", color=\"drv\")\n\n                                                \n\n\n\n\nexam데이터 활용\n\npx.scatter(data_frame=exam, x=\"nclass\", y=\"math\", color=\"nclass\")"
  },
  {
    "objectID": "posts/etc/index.html",
    "href": "posts/etc/index.html",
    "title": "LS 빅데이터 스쿨 homework_etc",
    "section": "",
    "text": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\nmpg = pd.read_csv(\"C:/Users/USER/Documents/LS빅데이터스쿨/LsBigdata-project1/data/mpg.csv\")\n\nexam = pd.read_csv(\"C:/Users/USER/Documents/LS빅데이터스쿨/LsBigdata-project1/data/exam.csv\")\n\nmidwest = pd.read_csv(\"C:/Users/USER/Documents/LS빅데이터스쿨/LsBigdata-project1/data/midwest.csv\")"
  },
  {
    "objectID": "posts/etc/index.html#page",
    "href": "posts/etc/index.html#page",
    "title": "LS 빅데이터 스쿨 homework_etc",
    "section": "204 page",
    "text": "204 page\n\nQ1.\n\nplt.clf()\nsns.scatterplot(data=mpg, x=\"cty\", y=\"hwy\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\nQ2.\n\nplt.clf()\nsns.scatterplot(data=midwest, x=\"poptotal\", y=\"popasian\")\\\n    .set(xlim = [0,500000], ylim = [0,10000])\nplt.show()"
  },
  {
    "objectID": "posts/etc/index.html#page-1",
    "href": "posts/etc/index.html#page-1",
    "title": "LS 빅데이터 스쿨 homework_etc",
    "section": "211 page",
    "text": "211 page\n\nQ1.\n\nmpg_suv = mpg.query(\"category == 'suv'\")\nmpg2=mpg_suv.groupby(\"manufacturer\", as_index = False)\\\n             .agg(cty_mean=(\"cty\",\"mean\"))\nmpg2=mpg2.sort_values(\"cty_mean\", ascending=False).head(5)\nplt.clf()\nsns.barplot(data=mpg2, x=\"manufacturer\", y=\"cty_mean\", hue=\"manufacturer\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\nQ2.\n\nmpg3=mpg.groupby(\"category\", as_index = False)\\\n             .agg(n=(\"category\",\"count\"))\nmpg3=mpg3.sort_values(\"n\", ascending=False)     \nplt.clf()\nsns.barplot(data=mpg3, x=\"category\", y=\"n\", hue=\"category\")\nplt.show()"
  },
  {
    "objectID": "posts/etc/index.html#page-2",
    "href": "posts/etc/index.html#page-2",
    "title": "LS 빅데이터 스쿨 homework_etc",
    "section": "316 page",
    "text": "316 page\n\nmpg데이터 활용\n\npx.scatter(data_frame=mpg, x=\"cty\", y=\"hwy\", color=\"drv\")\n\n                                                \n\n\n\n\nexam데이터 활용\n\npx.scatter(data_frame=exam, x=\"nclass\", y=\"math\", color=\"nclass\")"
  },
  {
    "objectID": "posts/hw4/index.html#q1.-n-1로-나눈-것을-s_2-n으로-나눈-것을-k_2로-정의하고-s_2의-분포와-k_2의-분포를-그려주세요",
    "href": "posts/hw4/index.html#q1.-n-1로-나눈-것을-s_2-n으로-나눈-것을-k_2로-정의하고-s_2의-분포와-k_2의-분포를-그려주세요",
    "title": "LS 빅데이터 스쿨 homework4",
    "section": "Q1. n-1로 나눈 것을 s_2, n으로 나눈 것을 k_2로 정의하고, s_2의 분포와 k_2의 분포를 그려주세요!",
    "text": "Q1. n-1로 나눈 것을 s_2, n으로 나눈 것을 k_2로 정의하고, s_2의 분포와 k_2의 분포를 그려주세요!"
  },
  {
    "objectID": "posts/hw4/index.html#개-사용",
    "href": "posts/hw4/index.html#개-사용",
    "title": "LS 빅데이터 스쿨 homework4",
    "section": "",
    "text": "import numpy as np\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\n\nnp.random.seed(20240729)\nx_values = np.linspace(-16, 24, 10000)\nx = norm.rvs(loc=3, scale=7, size=20)\n\nk_2 = np.var(x, ddof=0) # n으로 나눈 값\ns_2 = np.var(x, ddof=1) # n-1로 나눈 값\n\npdf_values1 = norm.pdf(x_values, loc=3, scale=np.sqrt(k_2))\npdf_values2 = norm.pdf(x_values, loc=3, scale=np.sqrt(s_2))\nplt.plot(x_values, pdf_values1, color=\"black\", linewidth=2) #n\nplt.plot(x_values, pdf_values2, color=\"blue\", linewidth=2) #n-1\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;"
  },
  {
    "objectID": "posts/hw4/index.html#q2.-각-분포-그래프에-모분산의-위치에-녹색-막대를-그려주세요.",
    "href": "posts/hw4/index.html#q2.-각-분포-그래프에-모분산의-위치에-녹색-막대를-그려주세요.",
    "title": "LS 빅데이터 스쿨 homework4",
    "section": "Q2. 각 분포 그래프에 모분산의 위치에 녹색 막대를 그려주세요.",
    "text": "Q2. 각 분포 그래프에 모분산의 위치에 녹색 막대를 그려주세요.\n\nimport numpy as np\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\n\nnp.random.seed(20240729)\nx_values = np.linspace(-16, 24, 10000)\nx = norm.rvs(loc=3, scale=7, size=20)\n\nk_2 = np.var(x, ddof=0) # n으로 나눈 값\ns_2 = np.var(x, ddof=1) # n-1로 나눈 값\nx_mean = x.mean()\n\npdf_values1 = norm.pdf(x_values, loc=3, scale=np.sqrt(k_2))\npdf_values2 = norm.pdf(x_values, loc=3, scale=np.sqrt(s_2))\nplt.plot(x_values, pdf_values1, color=\"black\", linewidth=2) #n\nplt.plot(x_values, pdf_values2, color=\"blue\", linewidth=2) #n-1\nplt.axvline(x_mean, color='green', linestyle=\"--\", linewidth=1, label='Mean')\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;"
  },
  {
    "objectID": "posts/hw4/index.html#결과를-살펴보고-왜-n-1로-나눈-것을-분산을-추정하는-지표로-사용하는-것이-타당한지-써주세요",
    "href": "posts/hw4/index.html#결과를-살펴보고-왜-n-1로-나눈-것을-분산을-추정하는-지표로-사용하는-것이-타당한지-써주세요",
    "title": "LS 빅데이터 스쿨 homework4",
    "section": "결과를 살펴보고, 왜 n-1로 나눈 것을 분산을 추정하는 지표로 사용하는 것이 타당한지 써주세요!",
    "text": "결과를 살펴보고, 왜 n-1로 나눈 것을 분산을 추정하는 지표로 사용하는 것이 타당한지 써주세요!\nn-1로 나눈 모분산의 그래프(파란선)이 모평균에 더 가깝기 때문에 n-1로 나눈 것을 분산으로 추정하는 지표로 사용하는 것이 타당하다."
  },
  {
    "objectID": "posts/hw4/index.html",
    "href": "posts/hw4/index.html",
    "title": "LS 빅데이터 스쿨 homework4",
    "section": "",
    "text": "n-1로 나눈 것을 s_2, n으로 나눈 것을 k_2로 정의하고, s_2의 분포와 k_2의 분포를 그려주세요! (10000개 사용)\n각 분포 그래프에 모분산의 위치에 녹색 막대를 그려주세요.\n\n\n# n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import uniform\n\nnp.random.seed(20240729)\nx = uniform.rvs(loc=3, scale=4, size=10000*20).reshape(-1,20)\nk_2 = x.var(axis=1, ddof=0)\npopulation_variance = uniform.var(loc=3, scale=4)\n\nplt.clf()\nsns.histplot(k_2, stat='density')\nplt.axvline(x=population_variance, color='green')\nplt.show()\n\n\n\n\n\n\n\n\n\n#n-1\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import uniform\n\nnp.random.seed(20240729)\nx = uniform.rvs(loc=3, scale=4, size=10000*20).reshape(-1,20)\ns_2 = x.var(axis=1, ddof=1)\npopulation_variance = uniform.var(loc=3, scale=4)\n\nplt.clf()\nsns.histplot(s_2, stat='density')\nplt.axvline(x=population_variance, color='green')\nplt.show()"
  },
  {
    "objectID": "posts/hw4/index.html#q1.-n-1로-나눈-것을-s_2-n으로-나눈-것을-k_2로-정의하고-s_2의-분포와-k_2의-분포를-그려주세요-10000개-사용",
    "href": "posts/hw4/index.html#q1.-n-1로-나눈-것을-s_2-n으로-나눈-것을-k_2로-정의하고-s_2의-분포와-k_2의-분포를-그려주세요-10000개-사용",
    "title": "LS 빅데이터 스쿨 homework4",
    "section": "Q1. n-1로 나눈 것을 s_2, n으로 나눈 것을 k_2로 정의하고, s_2의 분포와 k_2의 분포를 그려주세요! (10000개 사용)",
    "text": "Q1. n-1로 나눈 것을 s_2, n으로 나눈 것을 k_2로 정의하고, s_2의 분포와 k_2의 분포를 그려주세요! (10000개 사용)\n\nimport numpy as np\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\n\nnp.random.seed(20240729)\nx_values = np.linspace(-16, 24, 10000)\nx = norm.rvs(loc=3, scale=7, size=20)\n\nk_2 = np.var(x, ddof=0) # n으로 나눈 값\nk_2\n\nnp.float64(21.53268317636923)\n\n\n\nimport numpy as np\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\n\nnp.random.seed(20240729)\nx_values = np.linspace(-16, 24, 10000)\nx = norm.rvs(loc=3, scale=7, size=20)\n\ns_2 = np.var(x, ddof=1) # n-1로 나눈 값\ns_2\n\nnp.float64(22.66598229091498)\n\n\n\nimport numpy as np\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\n\nnp.random.seed(20240729)\nx_values = np.linspace(-16, 24, 10000)\nx = norm.rvs(loc=3, scale=7, size=20)\n\nk_2 = np.var(x, ddof=0) # n으로 나눈 값\ns_2 = np.var(x, ddof=1) # n-1로 나눈 값\n\npdf_values1 = norm.pdf(x_values, loc=3, scale=np.sqrt(k_2))\npdf_values2 = norm.pdf(x_values, loc=3, scale=np.sqrt(s_2))\nplt.plot(x_values, pdf_values1, color=\"black\", linewidth=2) #n\nplt.plot(x_values, pdf_values2, color=\"blue\", linewidth=2) #n-1\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;"
  },
  {
    "objectID": "posts/hw4/index.html#q3.-결과를-살펴보고-왜-n-1로-나눈-것을-분산을-추정하는-지표로-사용하는-것이-타당한지-써주세요",
    "href": "posts/hw4/index.html#q3.-결과를-살펴보고-왜-n-1로-나눈-것을-분산을-추정하는-지표로-사용하는-것이-타당한지-써주세요",
    "title": "LS 빅데이터 스쿨 homework4",
    "section": "Q3. 결과를 살펴보고, 왜 n-1로 나눈 것을 분산을 추정하는 지표로 사용하는 것이 타당한지 써주세요!",
    "text": "Q3. 결과를 살펴보고, 왜 n-1로 나눈 것을 분산을 추정하는 지표로 사용하는 것이 타당한지 써주세요!\nn-1로 나눈 모분산의 그래프(파란선)이 모평균에 더 가깝기 때문에 n-1로 나눈 것을 분산으로 추정하는 지표로 사용하는 것이 타당하다."
  },
  {
    "objectID": "posts/hw4/index.html#균일분포-3-7에서-20개의-표본을-뽑아서-분산을-2가지-방법으로-추정해보세요.",
    "href": "posts/hw4/index.html#균일분포-3-7에서-20개의-표본을-뽑아서-분산을-2가지-방법으로-추정해보세요.",
    "title": "LS 빅데이터 스쿨 homework4",
    "section": "",
    "text": "n-1로 나눈 것을 s_2, n으로 나눈 것을 k_2로 정의하고, s_2의 분포와 k_2의 분포를 그려주세요! (10000개 사용)\n각 분포 그래프에 모분산의 위치에 녹색 막대를 그려주세요.\n\n\n# n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import uniform\n\nnp.random.seed(20240729)\nx = uniform.rvs(loc=3, scale=4, size=10000*20).reshape(-1,20)\nk_2 = x.var(axis=1, ddof=0)\npopulation_variance = uniform.var(loc=3, scale=4)\n\nplt.clf()\nsns.histplot(k_2, stat='density')\nplt.axvline(x=population_variance, color='green')\nplt.show()\n\n\n\n\n\n\n\n\n\n#n-1\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import uniform\n\nnp.random.seed(20240729)\nx = uniform.rvs(loc=3, scale=4, size=10000*20).reshape(-1,20)\ns_2 = x.var(axis=1, ddof=1)\npopulation_variance = uniform.var(loc=3, scale=4)\n\nplt.clf()\nsns.histplot(s_2, stat='density')\nplt.axvline(x=population_variance, color='green')\nplt.show()"
  },
  {
    "objectID": "posts/hw4/index.html#이전",
    "href": "posts/hw4/index.html#이전",
    "title": "LS 빅데이터 스쿨 homework4",
    "section": "이전",
    "text": "이전\n\nn-1로 나눈 것을 s_2, n으로 나눈 것을 k_2로 정의하고, s_2의 분포와 k_2의 분포를 그려주세요! (10000개 사용)\n각 분포 그래프에 모분산의 위치에 녹색 막대를 그려주세요.\n\n\nimport numpy as np\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\n\nnp.random.seed(20240729)\nx_values = np.linspace(-16, 24, 10000)\nx = norm.rvs(loc=3, scale=7, size=20)\n\nk_2 = np.var(x, ddof=0) # n으로 나눈 값\nk_2\n\nnp.float64(21.53268317636923)\n\n\n\nimport numpy as np\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\n\nnp.random.seed(20240729)\nx_values = np.linspace(-16, 24, 10000)\nx = norm.rvs(loc=3, scale=7, size=20)\n\ns_2 = np.var(x, ddof=1) # n-1로 나눈 값\ns_2\n\nnp.float64(22.66598229091498)\n\n\n\nimport numpy as np\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\n\nnp.random.seed(20240729)\nx_values = np.linspace(-16, 24, 10000)\nx = norm.rvs(loc=3, scale=7, size=20)\n\nk_2 = np.var(x, ddof=0) # n으로 나눈 값\ns_2 = np.var(x, ddof=1) # n-1로 나눈 값\n\npdf_values1 = norm.pdf(x_values, loc=3, scale=np.sqrt(k_2))\npdf_values2 = norm.pdf(x_values, loc=3, scale=np.sqrt(s_2))\nplt.plot(x_values, pdf_values1, color=\"black\", linewidth=2) #n\nplt.plot(x_values, pdf_values2, color=\"blue\", linewidth=2) #n-1\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\nimport numpy as np\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\n\nnp.random.seed(20240729)\nx_values = np.linspace(-16, 24, 10000)\nx = norm.rvs(loc=3, scale=7, size=20)\n\nk_2 = np.var(x, ddof=0) # n으로 나눈 값\ns_2 = np.var(x, ddof=1) # n-1로 나눈 값\nx_mean = x.mean()\n\npdf_values1 = norm.pdf(x_values, loc=3, scale=np.sqrt(k_2))\npdf_values2 = norm.pdf(x_values, loc=3, scale=np.sqrt(s_2))\nplt.plot(x_values, pdf_values1, color=\"black\", linewidth=2) #n\nplt.plot(x_values, pdf_values2, color=\"blue\", linewidth=2) #n-1\nplt.axvline(x_mean, color='green', linestyle=\"--\", linewidth=1, label='Mean')\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;"
  },
  {
    "objectID": "posts/hw5/index.html",
    "href": "posts/hw5/index.html",
    "title": "LS 빅데이터 스쿨 homework5",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport pyreadstat\n\n# 데이터 불러오기\nraw_welfare = pd.read_spss(\"C:/Users/USER/Documents/LS빅데이터스쿨/LsBigdata-project1/data/koweps/Koweps_hpwc14_2019_beta2.sav\")\n\n# 복사본 만들기\nwelfare = raw_welfare.copy()\n\n# 변수명 바꾸기\nwelfare= welfare.rename(\n    columns = {\n        \"h14_g3\" : \"sex\",\n        \"h14_g4\" : \"birth\",\n        \"h14_g10\" : \"marrige_type\",\n        \"h14_g11\" : \"religion\",\n        \"p1402_8aq1\" : \"income\",\n        \"h14_eco9\" : \"code_job\",\n        \"h14_reg7\" : \"code_region\"\n    }\n)\n\nwelfare = welfare[[\"sex\",\"birth\", \"marrige_type\", \"religion\",\"income\",\"code_job\",\"code_region\"]]\n\nwelfare[\"sex\"] = np.where(welfare[\"sex\"] == 1.0, \"male\", \"female\")\n\nwelfare\n\n\n\n\n\n\n\n\nsex\nbirth\nmarrige_type\nreligion\nincome\ncode_job\ncode_region\n\n\n\n\n0\nfemale\n1945.0\n2.0\n1.0\nNaN\nNaN\n1.0\n\n\n1\nmale\n1948.0\n2.0\n2.0\nNaN\nNaN\n1.0\n\n\n2\nmale\n1942.0\n3.0\n1.0\n107.0\n762.0\n1.0\n\n\n3\nmale\n1962.0\n1.0\n1.0\n192.0\n855.0\n1.0\n\n\n4\nfemale\n1963.0\n1.0\n1.0\nNaN\nNaN\n1.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n14413\nfemale\n1967.0\n1.0\n1.0\nNaN\nNaN\n5.0\n\n\n14414\nfemale\n1992.0\n5.0\n1.0\nNaN\nNaN\n5.0\n\n\n14415\nmale\n1995.0\n5.0\n1.0\nNaN\n910.0\n5.0\n\n\n14416\nfemale\n1998.0\n5.0\n1.0\n200.0\n246.0\n5.0\n\n\n14417\nmale\n2001.0\n0.0\n1.0\nNaN\nNaN\n5.0\n\n\n\n\n14418 rows × 7 columns\n\n\n\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nsex_income = welfare.dropna(subset=\"income\")\\\n        .groupby(\"sex\", as_index = False)\\\n        .agg(mean_income = (\"income\",\"mean\"),\n             std_income = (\"income\",\"std\"),\n             count = (\"sex\",\"count\"))\nsex_income\n\n\n# 각 성별의 95% 신뢰구간 계산\nsex_income['ci_upper'] = sex_income['mean_income'] + 1.96 * sex_income['std_income'] / np.sqrt(sex_income['count'])\nsex_income['ci_lower'] = sex_income['mean_income'] - 1.96 * sex_income['std_income'] / np.sqrt(sex_income['count'])\n\n# 막대 그래프 그리기\nsns.barplot(data=sex_income, x='sex', y='mean_income', hue=\"sex\",errorbar=None)\n\n# 신뢰구간을 나타내는 에러바 추가\nplt.errorbar(\n    x=sex_income['sex'],  # x축 위치\n    y=sex_income['mean_income'],  # y축 평균 소득\n    yerr=[sex_income['mean_income'] - sex_income['ci_lower'],    \n    sex_income['ci_upper'] - sex_income['mean_income']],  # 신뢰구간 범위\n    fmt='none',  # 데이터 포인트는 표시하지 않음\n    capsize=20,  # 에러바 끝에 캡의 크기\n    color='black'  # 에러바 색상\n)\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;"
  },
  {
    "objectID": "posts/hw5/index.html#그래프에서-각-성별-95-신뢰구간-계산후-그리기위아래-검정색-막대기",
    "href": "posts/hw5/index.html#그래프에서-각-성별-95-신뢰구간-계산후-그리기위아래-검정색-막대기",
    "title": "LS 빅데이터 스쿨 homework5",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport pyreadstat\n\n# 데이터 불러오기\nraw_welfare = pd.read_spss(\"C:/Users/USER/Documents/LS빅데이터스쿨/LsBigdata-project1/data/koweps/Koweps_hpwc14_2019_beta2.sav\")\n\n# 복사본 만들기\nwelfare = raw_welfare.copy()\n\n# 변수명 바꾸기\nwelfare= welfare.rename(\n    columns = {\n        \"h14_g3\" : \"sex\",\n        \"h14_g4\" : \"birth\",\n        \"h14_g10\" : \"marrige_type\",\n        \"h14_g11\" : \"religion\",\n        \"p1402_8aq1\" : \"income\",\n        \"h14_eco9\" : \"code_job\",\n        \"h14_reg7\" : \"code_region\"\n    }\n)\n\nwelfare = welfare[[\"sex\",\"birth\", \"marrige_type\", \"religion\",\"income\",\"code_job\",\"code_region\"]]\n\nwelfare[\"sex\"] = np.where(welfare[\"sex\"] == 1.0, \"male\", \"female\")\n\nwelfare\n\n\n\n\n\n\n\n\nsex\nbirth\nmarrige_type\nreligion\nincome\ncode_job\ncode_region\n\n\n\n\n0\nfemale\n1945.0\n2.0\n1.0\nNaN\nNaN\n1.0\n\n\n1\nmale\n1948.0\n2.0\n2.0\nNaN\nNaN\n1.0\n\n\n2\nmale\n1942.0\n3.0\n1.0\n107.0\n762.0\n1.0\n\n\n3\nmale\n1962.0\n1.0\n1.0\n192.0\n855.0\n1.0\n\n\n4\nfemale\n1963.0\n1.0\n1.0\nNaN\nNaN\n1.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n14413\nfemale\n1967.0\n1.0\n1.0\nNaN\nNaN\n5.0\n\n\n14414\nfemale\n1992.0\n5.0\n1.0\nNaN\nNaN\n5.0\n\n\n14415\nmale\n1995.0\n5.0\n1.0\nNaN\n910.0\n5.0\n\n\n14416\nfemale\n1998.0\n5.0\n1.0\n200.0\n246.0\n5.0\n\n\n14417\nmale\n2001.0\n0.0\n1.0\nNaN\nNaN\n5.0\n\n\n\n\n14418 rows × 7 columns\n\n\n\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nsex_income = welfare.dropna(subset=\"income\")\\\n        .groupby(\"sex\", as_index = False)\\\n        .agg(mean_income = (\"income\",\"mean\"),\n             std_income = (\"income\",\"std\"),\n             count = (\"sex\",\"count\"))\nsex_income\n\n\n# 각 성별의 95% 신뢰구간 계산\nsex_income['ci_upper'] = sex_income['mean_income'] + 1.96 * sex_income['std_income'] / np.sqrt(sex_income['count'])\nsex_income['ci_lower'] = sex_income['mean_income'] - 1.96 * sex_income['std_income'] / np.sqrt(sex_income['count'])\n\n# 막대 그래프 그리기\nsns.barplot(data=sex_income, x='sex', y='mean_income', hue=\"sex\",errorbar=None)\n\n# 신뢰구간을 나타내는 에러바 추가\nplt.errorbar(\n    x=sex_income['sex'],  # x축 위치\n    y=sex_income['mean_income'],  # y축 평균 소득\n    yerr=[sex_income['mean_income'] - sex_income['ci_lower'],    \n    sex_income['ci_upper'] - sex_income['mean_income']],  # 신뢰구간 범위\n    fmt='none',  # 데이터 포인트는 표시하지 않음\n    capsize=20,  # 에러바 끝에 캡의 크기\n    color='black'  # 에러바 색상\n)\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;"
  },
  {
    "objectID": "pjts/project1-1/index.html",
    "href": "pjts/project1-1/index.html",
    "title": "Project1-1. 여행 정보 획득 경로",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\n\nroute = pd.read_excel(\"C:/Users/USER/Documents/LS빅데이터스쿨/team3_project/youna/youna_route.xlsx\",header=1)\n\n\n\n\n\n# 연도 결측치 처리\nroute.loc[0:8,\"year\"] = \"2018\"\nroute.loc[9:17,\"year\"] = \"2019\"\nroute.loc[18:26,\"year\"] = \"2020\"\nroute.loc[27:35,\"year\"] = \"2021\"\nroute.loc[36:43,\"year\"] = \"2022\"\n\n# 결측치 제거\nroute.replace('-', np.nan, inplace=True)\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_700\\4045614584.py:9: FutureWarning:\n\nDowncasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n\n\n\n\n\n\n\n# 변수 영어로 변경\nroute = route.rename(columns = {\"시점\":\"year\", \"항목\":\"access_path\", \"소계\" : \"total\", \"남자\" : \"male\", \"여자\" : \"female\"})\n\n# 경로명 영어로 바꾸기 \nroute.loc[route[\"access_path\"]==\"과거 방문 경험\", \"access_path\"] = \"experience\"\nroute.loc[route[\"access_path\"]==\"주변인(친지/친구/동료 등)\", \"access_path\"] = \"acquaintance\"\nroute.loc[route[\"access_path\"]==\"인터넷 사이트/모바일 앱(PC/스마트폰)\", \"access_path\"] = \"internet_mobile_app\"\nroute.loc[route[\"access_path\"]==\"광고(TV/라디오/ 신문/잡지/ 지하철/옥외 광고판 등)\", \"access_path\"] = \"advertising\"\nroute.loc[route[\"access_path\"]==\"기사 및 방송 프로그램(TV/라디오/ 신문/잡지)\", \"access_path\"] = \"article_broadcast\"\nroute.loc[route[\"access_path\"]==\"관광 안내 서적\", \"access_path\"] = \"guidebook\"\nroute.loc[route[\"access_path\"]==\"여행사(방문, 전화)\", \"access_path\"] = \"travel_agency\"\nroute.loc[route[\"access_path\"]==\"정보 없이 방문\", \"access_path\"] = \"no_information\"\nroute.loc[route[\"access_path\"]==\"기타\", \"access_path\"] = \"etc\"\n\n# 가구 영어로 바꾸기\nroute = route.rename(columns = { '1인' : 'per1',\n                         '2인' : 'per2',\n                        '3인이상' : 'per3+'})\n                        \n# 학벌 영어로 바꾸기\nroute = route.rename(columns = { '초졸 이하' : 'elmt',\n                         '중학교' : 'mid',\n                        '고등학교' : 'high',\n                        '대학교이상' : 'univ+',\n                        })\n\n\n\n\n\n# 연령대\nroute[\"teens\"] = route[\"15~19세\"]   \nroute[\"young_adults\"] = route[\"20대\"] + route[\"30대\"]\nroute[\"middle_adults\"] = route[\"40대\"] + route[\"50대\"]\nroute[\"senior\"] = route[\"60대\"] + route[\"70세 이상\"]\n\n#2018\nroute.loc[0:8, \"young_adults\"]  = (route.loc[0:8, \"young_adults\"]  / route.loc[0:8, \"young_adults\"].sum() * 100).round(1)\nroute.loc[0:8, \"middle_adults\"] = (route.loc[0:8, \"middle_adults\"] / route.loc[0:8, \"middle_adults\"].sum() * 100).round(1)\nroute.loc[0:8, \"senior\"] = (route.loc[0:8, \"senior\"]        / route.loc[0:8, \"senior\"].sum() * 100).round(1)\n#2019\nroute.loc[9:17, \"young_adults\"]  = (route.loc[9:17, \"young_adults\"]  / route.loc[9:17, \"young_adults\"].sum() * 100).round(1)\nroute.loc[9:17, \"middle_adults\"] = (route.loc[9:17, \"middle_adults\"] / route.loc[9:17, \"middle_adults\"].sum() * 100).round(1)\nroute.loc[9:17, \"senior\"] = (route.loc[9:17, \"senior\"]        / route.loc[9:17, \"senior\"].sum() * 100).round(1)\n#2020\nroute.loc[18:26, \"young_adults\"]  = (route.loc[18:26, \"young_adults\"]  / route.loc[18:26, \"young_adults\"].sum() * 100).round(1)\nroute.loc[18:26, \"middle_adults\"]    = (route.loc[18:26, \"middle_adults\"] / route.loc[18:26, \"middle_adults\"].sum() * 100).round(1)\nroute.loc[18:26, \"senior\"] = (route.loc[18:26, \"senior\"]       / route.loc[18:26, \"senior\"].sum() * 100).round(1)\n#2021\nroute.loc[27:35, \"young_adults\"]  = (route.loc[27:35, \"young_adults\"]  / route.loc[27:35, \"young_adults\"].sum() * 100).round(1)\nroute.loc[27:35, \"middle_adults\"] = (route.loc[27:35, \"middle_adults\"] / route.loc[27:35, \"middle_adults\"].sum() * 100).round(1)\nroute.loc[27:35, \"senior\"] = (route.loc[27:35, \"senior\"]        / route.loc[27:35, \"senior\"].sum() * 100).round(1)\n#2022\nroute.loc[36:43, \"young_adults\"]  = (route.loc[36:43, \"young_adults\"]  / route.loc[36:43, \"young_adults\"].sum() * 100).round(1)\nroute.loc[36:43, \"middle_adults\"] = (route.loc[36:43, \"middle_adults\"] / route.loc[36:43, \"middle_adults\"].sum() * 100).round(1)\nroute.loc[36:43, \"senior\"] = (route.loc[36:43, \"senior\"]        / route.loc[36:43, \"senior\"].sum() * 100).round(1)\n\n\n#월급\nroute[\"l_sal\"] = route[\"100만원 미만\"] + route[\"100~200만원 미만\"]\nroute[\"m_sal\"] = route[\"200~300만원 미만\"] + route[\"300~400만원 미만\"] + route[\"400~500만원 미만\"]\nroute[\"h_sal\"] = route[\"500~600만원 미만\"] + route[\"600만원 이상\"]\nroute[\"nr\"]= route[\"무응답\"]\n\n#2018\nroute.loc[0:8, \"l_sal\"] = (route.loc[0:8, \"l_sal\"] / route.loc[0:8, \"l_sal\"].sum() * 100).round(1)\nroute.loc[0:8, \"m_sal\"] = (route.loc[0:8, \"m_sal\"] / route.loc[0:8, \"m_sal\"].sum() * 100).round(1)\nroute.loc[0:8, \"h_sal\"] = (route.loc[0:8, \"h_sal\"] / route.loc[0:8, \"h_sal\"].sum() * 100).round(1)\n#2019\nroute.loc[9:17, \"l_sal\"] = (route.loc[9:17, \"l_sal\"] / route.loc[9:17, \"l_sal\"].sum() * 100).round(1)\nroute.loc[9:17, \"m_sal\"] = (route.loc[9:17, \"m_sal\"] / route.loc[9:17, \"m_sal\"].sum() * 100).round(1)\nroute.loc[9:17, \"h_sal\"] = (route.loc[9:17, \"h_sal\"] / route.loc[9:17, \"h_sal\"].sum() * 100).round(1)\n#2020\nroute.loc[18:26, \"l_sal\"] = (route.loc[18:26, \"l_sal\"] / route.loc[18:26, \"l_sal\"].sum() * 100).round(1)\nroute.loc[18:26, \"m_sal\"] = (route.loc[18:26, \"m_sal\"] / route.loc[18:26, \"m_sal\"].sum() * 100).round(1)\nroute.loc[18:26, \"h_sal\"] = (route.loc[18:26, \"h_sal\"] / route.loc[18:26, \"h_sal\"].sum() * 100).round(1)\n#2021\nroute.loc[27:35, \"l_sal\"] = (route.loc[27:35, \"l_sal\"] / route.loc[27:35, \"l_sal\"].sum() * 100).round(1)\nroute.loc[27:35, \"m_sal\"] = (route.loc[27:35, \"m_sal\"] / route.loc[27:35, \"m_sal\"].sum() * 100).round(1)\nroute.loc[27:35, \"h_sal\"] = (route.loc[27:35, \"h_sal\"] / route.loc[27:35, \"h_sal\"].sum() * 100).round(1)\n#2022\nroute.loc[36:43, \"l_sal\"] = (route.loc[36:43, \"l_sal\"] / route.loc[36:43, \"l_sal\"].sum() * 100).round(1)\nroute.loc[36:43, \"m_sal\"] = (route.loc[36:43, \"m_sal\"] / route.loc[36:43, \"m_sal\"].sum() * 100).round(1)\nroute.loc[36:43, \"h_sal\"] = (route.loc[36:43, \"h_sal\"] / route.loc[36:43, \"h_sal\"].sum() * 100).round(1)\n\n\n\n\n\n# 나이\nroute = route.drop(['15~19세', '20대', '30대', '40대', '50대', '60대', '70세 이상'], axis=1)\n\n# 직업\nroute = route.drop(['임금봉급근로자', '고용원있는사업주', '고용원없는자영업자', \n                    '무급가족 종사자', '사무전문', '기술생산노무', '판매서비스',\n                    \"자영업\",\"전업주부\",\"학생\",\"무직은퇴\",\"기타\"], axis=1)\n                    \n# 월급                  \nroute = route.drop(['100만원 미만', '100~200만원 미만', '200~300만원 미만', '300~400만원 미만', '400~500만원 미만','500~600만원 미만', '600만원 이상', \"무응답\"], axis=1)\n\n\n# 데이터 전처리 결과 확인하기\nroute.head(5)\n\n\n\n\n\n\n\n\nyear\naccess_path\ntotal\nmale\nfemale\nelmt\nmid\nhigh\nuniv+\nper1\n...\nper3+\nyear\nteens\nyoung_adults\nmiddle_adults\nsenior\nl_sal\nm_sal\nh_sal\nnr\n\n\n\n\n0\n2018.0\nexperience\n24.0\n24.8\n23.2\n19.0\n23.2\n24.1\n24.2\n24.7\n...\n23.8\n2018\n18.8\n22.3\n26.2\n23.7\n24.2\n23.2\n25.4\n17.5\n\n\n1\nNaN\nacquaintance\n41.5\n40.4\n42.7\n45.8\n43.1\n44.8\n38.7\n43.9\n...\n40.5\n2018\n39.0\n39.5\n42.0\n45.2\n46.5\n42.0\n40.5\n39.4\n\n\n2\nNaN\ninternet_mobile_app\n8.9\n9.7\n8.2\n0.7\n1.5\n5.6\n12.6\n8.1\n...\n10.0\n2018\n12.7\n14.9\n6.5\n2.2\n1.5\n8.4\n10.4\n20.3\n\n\n3\nNaN\nadvertising\n3.8\n3.8\n3.9\n2.8\n2.1\n3.7\n4.2\n2.9\n...\n4.0\n2018\n3.3\n4.3\n3.5\n3.6\n2.5\n4.0\n3.9\n4.1\n\n\n4\nNaN\narticle_broadcast\n4.0\n3.7\n4.3\n0.7\n3.2\n4.2\n4.1\n4.0\n...\n4.3\n2018\n2.8\n4.2\n4.2\n3.3\n1.9\n4.3\n4.0\n2.6\n\n\n\n\n5 rows × 21 columns\n\n\n\n\n\n\n\nroute.to_excel('pre_route.xlsx', index=False)"
  },
  {
    "objectID": "pjts/project1-1/index.html#전처리",
    "href": "pjts/project1-1/index.html#전처리",
    "title": "여행 정보 획득 경로",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\n\nroute = pd.read_excel(\"C:/Users/USER/Documents/LS빅데이터스쿨/team3_project/youna/youna_route.xlsx\",header=1)\n\n\n\n\n\n# 연도 결측치 처리\nroute.loc[0:8,\"year\"] = \"2018\"\nroute.loc[9:17,\"year\"] = \"2019\"\nroute.loc[18:26,\"year\"] = \"2020\"\nroute.loc[27:35,\"year\"] = \"2021\"\nroute.loc[36:43,\"year\"] = \"2022\"\n\n# 결측치 제거\nroute.replace('-', np.nan, inplace=True)\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_11572\\4045614584.py:9: FutureWarning:\n\nDowncasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n\n\n\n\n\n\n\n# 변수 영어로 변경\nroute = route.rename(columns = {\"시점\":\"year\", \"항목\":\"access_path\", \"소계\" : \"total\", \"남자\" : \"male\", \"여자\" : \"female\"})\n\n# 경로명 영어로 바꾸기 \nroute.loc[route[\"access_path\"]==\"과거 방문 경험\", \"access_path\"] = \"experience\"\nroute.loc[route[\"access_path\"]==\"주변인(친지/친구/동료 등)\", \"access_path\"] = \"acquaintance\"\nroute.loc[route[\"access_path\"]==\"인터넷 사이트/모바일 앱(PC/스마트폰)\", \"access_path\"] = \"internet_mobile_app\"\nroute.loc[route[\"access_path\"]==\"광고(TV/라디오/ 신문/잡지/ 지하철/옥외 광고판 등)\", \"access_path\"] = \"advertising\"\nroute.loc[route[\"access_path\"]==\"기사 및 방송 프로그램(TV/라디오/ 신문/잡지)\", \"access_path\"] = \"article_broadcast\"\nroute.loc[route[\"access_path\"]==\"관광 안내 서적\", \"access_path\"] = \"guidebook\"\nroute.loc[route[\"access_path\"]==\"여행사(방문, 전화)\", \"access_path\"] = \"travel_agency\"\nroute.loc[route[\"access_path\"]==\"정보 없이 방문\", \"access_path\"] = \"no_information\"\nroute.loc[route[\"access_path\"]==\"기타\", \"access_path\"] = \"etc\"\n\n# 가구 영어로 바꾸기\nroute = route.rename(columns = { '1인' : 'per1',\n                         '2인' : 'per2',\n                        '3인이상' : 'per3+'})\n                        \n# 학벌 영어로 바꾸기\nroute = route.rename(columns = { '초졸 이하' : 'elmt',\n                         '중학교' : 'mid',\n                        '고등학교' : 'high',\n                        '대학교이상' : 'univ+',\n                        })\n\n\n\n\n\n# 연령대\nroute[\"teens\"] = route[\"15~19세\"]   \nroute[\"young_adults\"] = route[\"20대\"] + route[\"30대\"]\nroute[\"middle_adults\"] = route[\"40대\"] + route[\"50대\"]\nroute[\"senior\"] = route[\"60대\"] + route[\"70세 이상\"]\n\n#2018\nroute.loc[0:8, \"young_adults\"]  = (route.loc[0:8, \"young_adults\"]  / route.loc[0:8, \"young_adults\"].sum() * 100).round(1)\nroute.loc[0:8, \"middle_adults\"] = (route.loc[0:8, \"middle_adults\"] / route.loc[0:8, \"middle_adults\"].sum() * 100).round(1)\nroute.loc[0:8, \"senior\"] = (route.loc[0:8, \"senior\"]        / route.loc[0:8, \"senior\"].sum() * 100).round(1)\n#2019\nroute.loc[9:17, \"young_adults\"]  = (route.loc[9:17, \"young_adults\"]  / route.loc[9:17, \"young_adults\"].sum() * 100).round(1)\nroute.loc[9:17, \"middle_adults\"] = (route.loc[9:17, \"middle_adults\"] / route.loc[9:17, \"middle_adults\"].sum() * 100).round(1)\nroute.loc[9:17, \"senior\"] = (route.loc[9:17, \"senior\"]        / route.loc[9:17, \"senior\"].sum() * 100).round(1)\n#2020\nroute.loc[18:26, \"young_adults\"]  = (route.loc[18:26, \"young_adults\"]  / route.loc[18:26, \"young_adults\"].sum() * 100).round(1)\nroute.loc[18:26, \"middle_adults\"]    = (route.loc[18:26, \"middle_adults\"] / route.loc[18:26, \"middle_adults\"].sum() * 100).round(1)\nroute.loc[18:26, \"senior\"] = (route.loc[18:26, \"senior\"]       / route.loc[18:26, \"senior\"].sum() * 100).round(1)\n#2021\nroute.loc[27:35, \"young_adults\"]  = (route.loc[27:35, \"young_adults\"]  / route.loc[27:35, \"young_adults\"].sum() * 100).round(1)\nroute.loc[27:35, \"middle_adults\"] = (route.loc[27:35, \"middle_adults\"] / route.loc[27:35, \"middle_adults\"].sum() * 100).round(1)\nroute.loc[27:35, \"senior\"] = (route.loc[27:35, \"senior\"]        / route.loc[27:35, \"senior\"].sum() * 100).round(1)\n#2022\nroute.loc[36:43, \"young_adults\"]  = (route.loc[36:43, \"young_adults\"]  / route.loc[36:43, \"young_adults\"].sum() * 100).round(1)\nroute.loc[36:43, \"middle_adults\"] = (route.loc[36:43, \"middle_adults\"] / route.loc[36:43, \"middle_adults\"].sum() * 100).round(1)\nroute.loc[36:43, \"senior\"] = (route.loc[36:43, \"senior\"]        / route.loc[36:43, \"senior\"].sum() * 100).round(1)\n\n\n#월급\nroute[\"l_sal\"] = route[\"100만원 미만\"] + route[\"100~200만원 미만\"]\nroute[\"m_sal\"] = route[\"200~300만원 미만\"] + route[\"300~400만원 미만\"] + route[\"400~500만원 미만\"]\nroute[\"h_sal\"] = route[\"500~600만원 미만\"] + route[\"600만원 이상\"]\nroute[\"nr\"]= route[\"무응답\"]\n\n#2018\nroute.loc[0:8, \"l_sal\"] = (route.loc[0:8, \"l_sal\"] / route.loc[0:8, \"l_sal\"].sum() * 100).round(1)\nroute.loc[0:8, \"m_sal\"] = (route.loc[0:8, \"m_sal\"] / route.loc[0:8, \"m_sal\"].sum() * 100).round(1)\nroute.loc[0:8, \"h_sal\"] = (route.loc[0:8, \"h_sal\"] / route.loc[0:8, \"h_sal\"].sum() * 100).round(1)\n#2019\nroute.loc[9:17, \"l_sal\"] = (route.loc[9:17, \"l_sal\"] / route.loc[9:17, \"l_sal\"].sum() * 100).round(1)\nroute.loc[9:17, \"m_sal\"] = (route.loc[9:17, \"m_sal\"] / route.loc[9:17, \"m_sal\"].sum() * 100).round(1)\nroute.loc[9:17, \"h_sal\"] = (route.loc[9:17, \"h_sal\"] / route.loc[9:17, \"h_sal\"].sum() * 100).round(1)\n#2020\nroute.loc[18:26, \"l_sal\"] = (route.loc[18:26, \"l_sal\"] / route.loc[18:26, \"l_sal\"].sum() * 100).round(1)\nroute.loc[18:26, \"m_sal\"] = (route.loc[18:26, \"m_sal\"] / route.loc[18:26, \"m_sal\"].sum() * 100).round(1)\nroute.loc[18:26, \"h_sal\"] = (route.loc[18:26, \"h_sal\"] / route.loc[18:26, \"h_sal\"].sum() * 100).round(1)\n#2021\nroute.loc[27:35, \"l_sal\"] = (route.loc[27:35, \"l_sal\"] / route.loc[27:35, \"l_sal\"].sum() * 100).round(1)\nroute.loc[27:35, \"m_sal\"] = (route.loc[27:35, \"m_sal\"] / route.loc[27:35, \"m_sal\"].sum() * 100).round(1)\nroute.loc[27:35, \"h_sal\"] = (route.loc[27:35, \"h_sal\"] / route.loc[27:35, \"h_sal\"].sum() * 100).round(1)\n#2022\nroute.loc[36:43, \"l_sal\"] = (route.loc[36:43, \"l_sal\"] / route.loc[36:43, \"l_sal\"].sum() * 100).round(1)\nroute.loc[36:43, \"m_sal\"] = (route.loc[36:43, \"m_sal\"] / route.loc[36:43, \"m_sal\"].sum() * 100).round(1)\nroute.loc[36:43, \"h_sal\"] = (route.loc[36:43, \"h_sal\"] / route.loc[36:43, \"h_sal\"].sum() * 100).round(1)\n\n\n\n\n\n# 나이\nroute = route.drop(['15~19세', '20대', '30대', '40대', '50대', '60대', '70세 이상'], axis=1)\n\n# 직업\nroute = route.drop(['임금봉급근로자', '고용원있는사업주', '고용원없는자영업자', \n                    '무급가족 종사자', '사무전문', '기술생산노무', '판매서비스',\n                    \"자영업\",\"전업주부\",\"학생\",\"무직은퇴\",\"기타\"], axis=1)\n                    \n# 월급                  \nroute = route.drop(['100만원 미만', '100~200만원 미만', '200~300만원 미만', '300~400만원 미만', '400~500만원 미만','500~600만원 미만', '600만원 이상', \"무응답\"], axis=1)\nroute.info() \n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 44 entries, 0 to 43\nData columns (total 21 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   year           5 non-null      float64\n 1   access_path    44 non-null     object \n 2   total          44 non-null     float64\n 3   male           44 non-null     float64\n 4   female         43 non-null     float64\n 5   elmt           41 non-null     float64\n 6   mid            42 non-null     float64\n 7   high           44 non-null     float64\n 8   univ+          44 non-null     float64\n 9   per1           43 non-null     float64\n 10  per2           43 non-null     float64\n 11  per3+          44 non-null     float64\n 12  year           44 non-null     object \n 13  teens          42 non-null     float64\n 14  young_adults   42 non-null     float64\n 15  middle_adults  42 non-null     float64\n 16  senior         41 non-null     float64\n 17  l_sal          38 non-null     float64\n 18  m_sal          42 non-null     float64\n 19  h_sal          42 non-null     float64\n 20  nr             7 non-null      float64\ndtypes: float64(19), object(2)\nmemory usage: 7.3+ KB\n\n\n\n\n\n\nroute.to_excel('pre_route.xlsx', index=False)"
  },
  {
    "objectID": "pjts/project1-1/index.html#개년-평균-경로-순위-막대그래프",
    "href": "pjts/project1-1/index.html#개년-평균-경로-순위-막대그래프",
    "title": "Project1-1. 여행 정보 획득 경로",
    "section": "1. 5개년 평균 경로 순위 막대그래프",
    "text": "1. 5개년 평균 경로 순위 막대그래프\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\n\n\npre_route = pd.read_excel(\"C:/Users/USER/Documents/LS빅데이터스쿨/team3_project/youna/pre_route.xlsx\")\n\n##1. 5개년 평균 경로 순위 구하기\nroute2=pre_route.groupby(\"access_path\")\\\n                .agg(total_mean = (\"total\",\"mean\"))\n\nroute2 = route2.sort_values([\"total_mean\"], ascending = False)\n\n##2. 그래프화 화기\nplt.clf()\nplt.rcParams['font.family'] ='Malgun Gothic'\nplt.subplots_adjust(bottom=0.2)\nsns.barplot(data=route2, x=\"access_path\", y=\"total_mean\", palette = \"Set1\")\nplt.xlabel('여행 정보 획득 경로')\nplt.ylabel('소계')\nplt.xticks(rotation=20)\nplt.xticks(fontsize=8)\nplt.title('5개년 평균 여행 정보 획득 경로',fontsize=15)\nplt.show()\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_700\\2622033830.py:19: FutureWarning:\n\n\n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect."
  },
  {
    "objectID": "pjts/project1-1/index.html#연도별-정보-획득-경로-추이",
    "href": "pjts/project1-1/index.html#연도별-정보-획득-경로-추이",
    "title": "Project1-1. 여행 정보 획득 경로",
    "section": "2. 연도별 정보 획득 경로 추이",
    "text": "2. 연도별 정보 획득 경로 추이\n\nfrom matplotlib.ticker import MaxNLocator\n\npre_route = pd.read_excel(\"C:/Users/USER/Documents/LS빅데이터스쿨/team3_project/youna/pre_route.xlsx\")\n\nroute_path1 = pre_route.query(\"access_path=='acquaintance'\")\nroute_path2 = pre_route.query(\"access_path=='experience'\")\nroute_path3 = pre_route.query(\"access_path=='no_information'\")\nroute_path4 = pre_route.query(\"access_path=='internet_mobile_app'\")\n\nplt.clf()\nplt.plot(route_path1[\"year\"], route_path1[\"total\"], marker='o', label=\"지인 추천\")\nplt.plot(route_path2[\"year\"], route_path2[\"total\"], marker='o', label=\"과거경험\")\nplt.plot(route_path3[\"year\"], route_path3[\"total\"], marker='o', label=\"정보 없이 여행\")\nplt.plot(route_path4[\"year\"], route_path4[\"total\"], marker='o', label=\"인터넷 및 모바일앱\")\n\nplt.gca().xaxis.set_major_locator(MaxNLocator(integer=True))\n\nplt.subplots_adjust(right=0.71)\nplt.legend(loc='upper left', bbox_to_anchor=(1, 1),fontsize=7)\nplt.rcParams['font.family'] ='Malgun Gothic'\nplt.title('연도별 여행 정보 획득 경로',fontsize=15)\nplt.show()"
  },
  {
    "objectID": "pjts/project1-1/index.html#결론",
    "href": "pjts/project1-1/index.html#결론",
    "title": "Project1-1. 여행 정보 획득 경로",
    "section": "결론",
    "text": "결론\n지인추천, 과거경험, 정보없이 여행, 인터넷 및 모바일앱이 가장 많이 여행 정보를 획득하는 경로로 파악됨. 지인추천은 2018년도 이후로 감소하는 추세이고, 인터넷 및 모바일앱은 계속해서 증가하는 추세임."
  },
  {
    "objectID": "pjts/project1-2/index.html",
    "href": "pjts/project1-2/index.html",
    "title": "Project1-2. 지역별 관광지 검색 순위",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\n\ntour_2018 = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/PORTFOLIO/data/ranking_2018.csv', encoding='cp949')\ntour_2019 = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/PORTFOLIO/data/ranking_2019.csv', encoding='cp949')\ntour_2020 = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/PORTFOLIO/data/ranking_2020.csv', encoding='cp949')\ntour_2021 = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/PORTFOLIO/data/ranking_2021.csv', encoding='cp949')\ntour_2022 = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/PORTFOLIO/data/ranking_2022.csv', encoding='cp949')\n\n\n\n\n\nrename_dict = {'순위': 'ranking', '광역시/도': 'state', '시/군/구': 'city', '관광지명': 'spot',\n               '도로명주소': 'address', '중분류 카테고리': 'category_m', '소분류 카테고리': 'category_s', '검색건수': 'search_count'}\n\ntour_2018.rename(columns=rename_dict, inplace=True)\ntour_2019.rename(columns=rename_dict, inplace=True)\ntour_2020.rename(columns=rename_dict, inplace=True)\ntour_2021.rename(columns=rename_dict, inplace=True)\ntour_2022.rename(columns=rename_dict, inplace=True)\n\n\n\n\n\ncate_remove = ['교통시설', '면세점', '백화점', '쇼핑몰', '대형마트', '기타쇼핑시설']\n\n# 각 연도별 데이터에서 'cate_remove' 목록에 해당하는 카테고리를 제거\ntour_2018 = tour_2018[~tour_2018['category_s'].isin(cate_remove)]\ntour_2019 = tour_2019[~tour_2019['category_s'].isin(cate_remove)]\ntour_2020 = tour_2020[~tour_2020['category_s'].isin(cate_remove)]\ntour_2021 = tour_2021[~tour_2021['category_s'].isin(cate_remove)]\ntour_2022 = tour_2022[~tour_2022['category_s'].isin(cate_remove)]\n\n\n\n\n\ntour_2018['year'] = 2018\ntour_2019['year'] = 2019\ntour_2020['year'] = 2020\ntour_2021['year'] = 2021\ntour_2022['year'] = 2022\n\n\n\n\n\ntours = [tour_2018, tour_2019, tour_2020, tour_2021, tour_2022]\ntour_total = pd.concat(tours, ignore_index=True)\n\n# 불필요한 열 삭제\ntour_total.drop(columns=['address', 'ranking'], inplace=True)\n\n\n\n\n\ntour_total['combined_city'] = tour_total['state'] + \" \" + tour_total['city']\n\n# 결과 확인\ntour_total.info()\nprint(tour_total.head())  \nprint(tour_total['category_s'].unique())  # 카테고리 확인\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 1373 entries, 0 to 1372\nData columns (total 8 columns):\n #   Column         Non-Null Count  Dtype \n---  ------         --------------  ----- \n 0   state          1373 non-null   object\n 1   city           1373 non-null   object\n 2   spot           1373 non-null   object\n 3   category_m     1373 non-null   object\n 4   category_s     1373 non-null   object\n 5   search_count   1373 non-null   int64 \n 6   year           1373 non-null   int64 \n 7   combined_city  1373 non-null   object\ndtypes: int64(2), object(6)\nmemory usage: 85.9+ KB\n   state     city         spot category_m category_s  search_count  year  \\\n0  서울특별시      강남구          코엑스       문화관광       전시시설        456473  2018   \n1    경기도  용인시 처인구         에버랜드       문화관광       테마공원        330266  2018   \n2  서울특별시      동작구      노량진수산시장         쇼핑         시장        251985  2018   \n3  서울특별시      송파구  가락동농수산물도매시장         쇼핑         시장        231899  2018   \n4  서울특별시      용산구   CGV용산아이파크몰       문화관광       공연시설        227562  2018   \n\n  combined_city  \n0     서울특별시 강남구  \n1   경기도 용인시 처인구  \n2     서울특별시 동작구  \n3     서울특별시 송파구  \n4     서울특별시 용산구  \n['전시시설' '테마공원' '시장' '공연시설' '자연경관(하천/해양)' '역사유적지' '도시공원' '기타문화관광지' '기타관광'\n '종교성지' '자연생태' '레저스포츠시설' '랜드마크관광' '자연경관(산)' '복합관광시설' '자연공원' '육상레저스포츠'\n '기타레저스포츠' '웰니스관광' '농/산/어촌체험' '자연관광(산)' '데이트코스' '수상레저스포츠']\n\n\n\n\n\n\n# 전처리 파일 저장\ntour_total.to_excel('C:/Users/USER/Documents/LS빅데이터스쿨/PORTFOLIO/pre_data/total_tour.xlsx', index=False)"
  },
  {
    "objectID": "pjts/project1-2/index.html#전처리",
    "href": "pjts/project1-2/index.html#전처리",
    "title": "Project1-2. 지역별 관광지 검색 순위",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\n\ntour_2018 = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/PORTFOLIO/data/ranking_2018.csv', encoding='cp949')\ntour_2019 = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/PORTFOLIO/data/ranking_2019.csv', encoding='cp949')\ntour_2020 = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/PORTFOLIO/data/ranking_2020.csv', encoding='cp949')\ntour_2021 = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/PORTFOLIO/data/ranking_2021.csv', encoding='cp949')\ntour_2022 = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/PORTFOLIO/data/ranking_2022.csv', encoding='cp949')\n\n\n\n\n\nrename_dict = {'순위': 'ranking', '광역시/도': 'state', '시/군/구': 'city', '관광지명': 'spot',\n               '도로명주소': 'address', '중분류 카테고리': 'category_m', '소분류 카테고리': 'category_s', '검색건수': 'search_count'}\n\ntour_2018.rename(columns=rename_dict, inplace=True)\ntour_2019.rename(columns=rename_dict, inplace=True)\ntour_2020.rename(columns=rename_dict, inplace=True)\ntour_2021.rename(columns=rename_dict, inplace=True)\ntour_2022.rename(columns=rename_dict, inplace=True)\n\n\n\n\n\ncate_remove = ['교통시설', '면세점', '백화점', '쇼핑몰', '대형마트', '기타쇼핑시설']\n\n# 각 연도별 데이터에서 'cate_remove' 목록에 해당하는 카테고리를 제거\ntour_2018 = tour_2018[~tour_2018['category_s'].isin(cate_remove)]\ntour_2019 = tour_2019[~tour_2019['category_s'].isin(cate_remove)]\ntour_2020 = tour_2020[~tour_2020['category_s'].isin(cate_remove)]\ntour_2021 = tour_2021[~tour_2021['category_s'].isin(cate_remove)]\ntour_2022 = tour_2022[~tour_2022['category_s'].isin(cate_remove)]\n\n\n\n\n\ntour_2018['year'] = 2018\ntour_2019['year'] = 2019\ntour_2020['year'] = 2020\ntour_2021['year'] = 2021\ntour_2022['year'] = 2022\n\n\n\n\n\ntours = [tour_2018, tour_2019, tour_2020, tour_2021, tour_2022]\ntour_total = pd.concat(tours, ignore_index=True)\n\n# 불필요한 열 삭제\ntour_total.drop(columns=['address', 'ranking'], inplace=True)\n\n\n\n\n\ntour_total['combined_city'] = tour_total['state'] + \" \" + tour_total['city']\n\n# 결과 확인\ntour_total.info()\nprint(tour_total.head())  \nprint(tour_total['category_s'].unique())  # 카테고리 확인\n\n# 전처리 파일 저장\ntour_total.to_excel('C:/Users/USER/Documents/LS빅데이터스쿨/PORTFOLIO/pre_data/total_tour.xlsx', index=False)\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 1373 entries, 0 to 1372\nData columns (total 8 columns):\n #   Column         Non-Null Count  Dtype \n---  ------         --------------  ----- \n 0   state          1373 non-null   object\n 1   city           1373 non-null   object\n 2   spot           1373 non-null   object\n 3   category_m     1373 non-null   object\n 4   category_s     1373 non-null   object\n 5   search_count   1373 non-null   int64 \n 6   year           1373 non-null   int64 \n 7   combined_city  1373 non-null   object\ndtypes: int64(2), object(6)\nmemory usage: 85.9+ KB\n   state     city         spot category_m category_s  search_count  year  \\\n0  서울특별시      강남구          코엑스       문화관광       전시시설        456473  2018   \n1    경기도  용인시 처인구         에버랜드       문화관광       테마공원        330266  2018   \n2  서울특별시      동작구      노량진수산시장         쇼핑         시장        251985  2018   \n3  서울특별시      송파구  가락동농수산물도매시장         쇼핑         시장        231899  2018   \n4  서울특별시      용산구   CGV용산아이파크몰       문화관광       공연시설        227562  2018   \n\n  combined_city  \n0     서울특별시 강남구  \n1   경기도 용인시 처인구  \n2     서울특별시 동작구  \n3     서울특별시 송파구  \n4     서울특별시 용산구  \n['전시시설' '테마공원' '시장' '공연시설' '자연경관(하천/해양)' '역사유적지' '도시공원' '기타문화관광지' '기타관광'\n '종교성지' '자연생태' '레저스포츠시설' '랜드마크관광' '자연경관(산)' '복합관광시설' '자연공원' '육상레저스포츠'\n '기타레저스포츠' '웰니스관광' '농/산/어촌체험' '자연관광(산)' '데이트코스' '수상레저스포츠']\n\n\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib as plt\n\ntour_total = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/PORTFOLIO/pre_data/total_tour.csv', encoding = 'cp949')\n\nimport matplotlib.pyplot as plt\nplt.rcParams['font.family'] ='Malgun Gothic'\nplt.rcParams['axes.unicode_minus'] =False\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_18464\\3780840232.py:5: DtypeWarning:\n\nColumns (1,2,3,4,5,6,9) have mixed types. Specify dtype option on import or set low_memory=False.\n\n\n\n\n\n\n\n# Top 3 순위 구하기\ntour_total_rank = tour_total.groupby(\"spot\")\\\n                            .agg(mean = (\"search_count\",\"mean\"))\n        \ntour_total_rank.sort_values([\"mean\"], ascending=False)\n\n# 그래프 그리기\nfrom matplotlib.ticker import MaxNLocator\n\nranking1 = tour_total.query(\"spot=='에버랜드'\")\nranking2 = tour_total.query(\"spot=='속초관광수산시장'\")\nranking3 = tour_total.query(\"spot=='코엑스'\")\n\nplt.clf()\n\nplt.plot(ranking1[\"year\"], ranking1[\"search_count\"], marker='o', label=\"에버랜드\")\nplt.plot(ranking2[\"year\"], ranking2[\"search_count\"], marker='o', label='속초관광수산시장')\nplt.plot(ranking3[\"year\"], ranking3[\"search_count\"], marker='o', label='코엑스')\n\nplt.gca().xaxis.set_major_locator(MaxNLocator(integer=True))\nplt.title('상위 3개 관광지 5년 추이')\nplt.xlabel('년도')\nplt.ylabel('검색수')\nplt.legend(title='Spot', bbox_to_anchor=(1.05, 1), loc='upper left', prop={'size': 10})\nplt.grid(True)\nplt.tight_layout()\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n\n\n# 중분류 수정본\n# tour_total[\"year\"] = tour_total[\"year\"].astype(int)\n# Top 3 순위 구하기\ntour_total_c = tour_total.groupby(\"category_m\")\\\n                            .agg(c_sum = (\"search_count\",\"sum\"))\n        \ntour_total_c.sort_values([\"c_sum\"], ascending=False)\n\n# 그래프 그리기\nfrom matplotlib.ticker import MaxNLocator\n\ntour_total_c2 = tour_total.groupby([\"year\",\"category_m\"], as_index=False)\\\n                            .agg(category_sum = (\"search_count\",\"sum\"))\n\n\n\nranking4 = tour_total_c2.query(\"category_m=='쇼핑'\")\n\nranking5 = tour_total_c2.query(\"category_m=='자연관광'\")\n\nranking6 = tour_total_c2.query(\"category_m=='문화관광'\")\n\n\nplt.clf()\n\nplt.plot(ranking4[\"year\"], ranking4[\"category_sum\"], marker='o', label=\"쇼핑\")\nplt.plot(ranking5[\"year\"], ranking5[\"category_sum\"], marker='o', label='자연관광')\nplt.plot(ranking6[\"year\"], ranking6[\"category_sum\"], marker='o', label='문화관광')\n\nplt.gca().xaxis.set_major_locator(MaxNLocator(integer=True))\nplt.title('상위 3개 관광지 중분류 5년 추이')\nplt.xlabel('년도')\nplt.ylabel('검색수 (단위: 천만 회)')\nplt.legend(title='Spot', bbox_to_anchor=(1.05, 1), loc='upper left', prop={'size': 10})\nplt.grid(True)\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "pjts/project1-2/index.html#결론",
    "href": "pjts/project1-2/index.html#결론",
    "title": "Project1-2. 지역별 관광지 검색 순위",
    "section": "결론",
    "text": "결론\n\n상위 3개 관광지 5년 추이 2020년 속초 수산시장이 1위를 한 이유는 코로나 시기 언택트 호캉스의 유행으로 여행 횟수가 감소하지 않은 것으로 보입니다. 2022년 에버랜드 1위 이유는 푸바오 인기에 입장객이 늘어났습니다.\n2018~2022 관광지 중분류 Top3 문화관광이 2020년 대폭 감소한 이유는 코로나 19 거리두기의 영향으로 보임. 자연관광이 2020년 1위인 이유는 사람들이 붐비는 곳에서 벗어나 자연을 즐기려는 사람이 많았던 것으로 예상됨."
  },
  {
    "objectID": "pjts/project1-3/index.html",
    "href": "pjts/project1-3/index.html",
    "title": "Project1-3. 국내 여행 횟수",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n# header를 두번째 행으로 고정, 첫번째 행에는 불필요한 정보가 들어있기 때문\nnum_trip = pd.read_excel('C:/Users/USER/Documents/LS빅데이터스쿨/PORTFOLIO/data/R_월별_국내여행_횟수_20240714204514.xlsx', header=1)\n\n\n\n\n\n# 시점\nnum_trip = num_trip.rename(columns = { '시점' : 'year', '항목' : 'month'})\n\n# 전체\nnum_trip = num_trip.rename(columns = { '소계' : 'total'})\n\n# 성별\nnum_trip = num_trip.rename(columns = { '남자' : 'male', '여자' :'female'})\n\n\n# 학력\nnum_trip = num_trip.rename(columns = { '초졸 이하' : 'elmt', '중학교' : 'mid',\n                                       '고등학교' : 'high', '대학교이상' : 'univ+'})\n\n# 가구원수\nnum_trip = num_trip.rename(columns = { '1인' : 'per1',\n                                       '2인' : 'per2',\n                                       '3인이상' : 'per3+'})\n\n\n\n\n\n# 연령 - 15\\~19세, 20대, 30대, 40대, 50대, 60대, 70세 이상을 청소년, 청년, 중년, 노년 층으로 구분\nnum_trip[\"teens\"] = num_trip[\"15~19세\"]\nnum_trip[\"young_adults\"] = num_trip[\"20대\"] + num_trip[\"30대\"]\nnum_trip[\"middle_adults\"] = num_trip[\"40대\"] + num_trip[\"50대\"]\nnum_trip[\"seniors\"] = num_trip[\"60대\"] + num_trip[\"70세 이상\"]\n\n\n\n\n\n# 15~19세, 20대, 30대, 40대, 50대, 60대, 70세 이상 열 7개 삭제\nnum_trip = num_trip.drop(num_trip.columns[np.arange(5,12,1)], axis=1)\n\n\n\n\n\n# 저소득 \\~ 200 만원 / 중위소득 200\\~500 만원 / 고소득 500\\~600이상 / 무응답\nnum_trip[\"l_sal\"] = num_trip[\"100만원 미만\"]     + num_trip[\"100~200만원 미만\"]\nnum_trip[\"m_sal\"] = num_trip[\"200~300만원 미만\"] + num_trip[\"300~400만원 미만\"] + num_trip[\"400~500만원 미만\"]\nnum_trip[\"h_sal\"] = num_trip[\"500~600만원 미만\"] + num_trip[\"600만원 이상\"]\nnum_trip[\"nr\"]    = num_trip[\"무응답\"]\n\n\n\n\n\n# np.arrange를 사용하여 columns의 index 지정(24,32,1) 총 100만원 미만, 100\\~200만원 미만, 200\\~300만원 미만, 300\\~400만원 미만, 400\\~500만원 미만, 500\\~600만원 미만, 600만원 이상, 무응답 총 8열 삭제\nnum_trip = num_trip.drop(num_trip.columns[np.arange(24,32,1)], axis=1)\n\n\n\n\n\n# 임금봉급근로자, 고용원있는사업주, 고용원없는자영업자, 무급가족 종사자, 사무전문, 기술생산노무, 판매서비스, 자영업, 학생, 전업주부, 무직은퇴, 기타 총 12개의 열 삭제\n\n# drop()과 np.arrange를 사용하여 columns의 index 지정(5,17,1)\nnum_trip = num_trip.drop(num_trip.columns[np.arange(5,17,1)], axis=1)\n\n\n\n\n\n\n# year의 null값 index 범위를 지정하고 2018, 2019, 2020, 2021, 2022 값 할당\nnum_trip['year'][1 :12] = 2018\nnum_trip['year'][13:24] = 2019\nnum_trip['year'][25:36] = 2020\nnum_trip['year'][37:48] = 2021\nnum_trip['year'][49:60] = 2022\n\n# month의 type을 object에서 int로 형 변환 필요\n# str.replace()를 사용해서 맨 마지막 글자인 '월'을 ''로 변경\n# astype('int')를 사용하여 int값으로 형 변환\nnum_trip['month'] = num_trip['month'].str.replace('월','')\nnum_trip['month'] = num_trip['month'].astype('int')\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_2604\\1564370647.py:2: FutureWarning:\n\nChainedAssignmentError: behaviour will change in pandas 3.0!\nYou are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\nA typical example is when you are setting values in a column of a DataFrame, like:\n\ndf[\"col\"][row_indexer] = value\n\nUse `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_2604\\1564370647.py:2: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_2604\\1564370647.py:3: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_2604\\1564370647.py:4: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_2604\\1564370647.py:5: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_2604\\1564370647.py:6: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n\n\n\n\n\n\n# loc을 사용하여 nr 컬럼의 값이 \"-\"인 nr열의 값에 np.nan을 할당\nnum_trip.loc[num_trip[\"nr\"] == \"-\", [\"nr\"]] = np.nan\n\n# 데이터 전처리 결과 확인하기\nnum_trip.head(5)\n\n\n\n\n\n\n\n\nyear\nmonth\ntotal\nmale\nfemale\nelmt\nmid\nhigh\nuniv+\nper1\nper2\nper3+\nteens\nyoung_adults\nmiddle_adults\nseniors\nl_sal\nm_sal\nh_sal\nnr\n\n\n\n\n0\n2018.0\n1\n24233\n13019\n11214\n322\n1326\n8980\n13604\n2902\n4946\n16384\n1267\n8113\n10362\n4491\n1925\n12005\n10148\n156\n\n\n1\n2018.0\n2\n28263\n14868\n13396\n567\n1476\n11288\n14931\n3286\n6075\n18902\n1370\n9087\n12154\n5651\n1798\n15334\n10982\n149\n\n\n2\n2018.0\n3\n24668\n12768\n11900\n565\n1806\n8723\n13575\n3368\n5504\n15796\n1110\n8645\n9875\n5039\n1912\n13060\n9545\n149\n\n\n3\n2018.0\n4\n24242\n12099\n12143\n482\n1668\n8810\n13281\n3058\n5590\n15594\n1111\n8607\n9052\n5473\n2173\n12848\n9082\n139\n\n\n4\n2018.0\n5\n24571\n12607\n11965\n912\n1596\n9064\n13000\n3142\n5096\n16334\n1232\n7960\n9774\n5606\n2086\n12881\n9348\n255\n\n\n\n\n\n\n\n\n\n\n\n# to_excel()을 사용하여 DataFrame을 xlsx파일 형태로 저장\n# index=False : Unnamed: 0 이라는 임의의 인덱스가 생성되는 것을 방지\nnum_trip.to_excel(excel_writer = 'C:/Users/USER/Documents/LS빅데이터스쿨/PORTFOLIO/pre_data/p_num_trip.xlsx', index=False)"
  },
  {
    "objectID": "pjts/project1-3/index.html#data-preprocessing-데이터-전처리",
    "href": "pjts/project1-3/index.html#data-preprocessing-데이터-전처리",
    "title": "국내 여행 횟수",
    "section": "",
    "text": "# 라이브러리 호출\nimport pandas as pd\nimport numpy as np\n\n\n\n\n\nData 저장 경로 규칙\n\n원본 데이터 : data 폴더의 R_월별_국내여행_횟수_20240714204514.xlsx\n전처리 이후 데이터 : pre_data 폴더의 p_num_trip.xlsx\n\n\n\n# header를 두번째 행으로 고정, 첫번째 행에는 불필요한 정보가 들어있기 때문\nnum_trip = pd.read_excel('C:/Users/USER/Documents/LS빅데이터스쿨/PORTFOLIO/data/R_월별_국내여행_횟수_20240714204514.xlsx', header=1)\n\n\n\n\n\n\n# 시점\nnum_trip = num_trip.rename(columns = { '시점' : 'year', '항목' : 'month'})\n\n# 전체\nnum_trip = num_trip.rename(columns = { '소계' : 'total'})\n\n# 성별\nnum_trip = num_trip.rename(columns = { '남자' : 'male', '여자' :'female'})\n\n\n# 학력\nnum_trip = num_trip.rename(columns = { '초졸 이하' : 'elmt', '중학교' : 'mid',\n                                       '고등학교' : 'high', '대학교이상' : 'univ+'})\n\n# 가구원수\nnum_trip = num_trip.rename(columns = { '1인' : 'per1',\n                                       '2인' : 'per2',\n                                       '3인이상' : 'per3+'})\n\n\n\n\n\n\n\n\nnum_trip[\"teens\"] = num_trip[\"15~19세\"]\nnum_trip[\"young_adults\"] = num_trip[\"20대\"] + num_trip[\"30대\"]\nnum_trip[\"middle_adults\"] = num_trip[\"40대\"] + num_trip[\"50대\"]\nnum_trip[\"seniors\"] = num_trip[\"60대\"] + num_trip[\"70세 이상\"]\n\n\n\n\n\n\n\n# 15~19세, 20대, 30대, 40대, 50대, 60대, 70세 이상 열 7개 삭제\nnum_trip = num_trip.drop(num_trip.columns[np.arange(5,12,1)], axis=1)\n\n\n\n\n\n\n\n\nnum_trip[\"l_sal\"] = num_trip[\"100만원 미만\"]     + num_trip[\"100~200만원 미만\"]\nnum_trip[\"m_sal\"] = num_trip[\"200~300만원 미만\"] + num_trip[\"300~400만원 미만\"] + num_trip[\"400~500만원 미만\"]\nnum_trip[\"h_sal\"] = num_trip[\"500~600만원 미만\"] + num_trip[\"600만원 이상\"]\nnum_trip[\"nr\"]    = num_trip[\"무응답\"]\n\n\n\n\n\n\n\n\nnum_trip = num_trip.drop(num_trip.columns[np.arange(24,32,1)], axis=1)\n\n\n\n\n\n\n\n\n\n\n\n\n\nnum_trip = num_trip.drop(num_trip.columns[np.arange(5,17,1)], axis=1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# year의 null값 index 범위를 지정하고 2018, 2019, 2020, 2021, 2022 값 할당\nnum_trip['year'][1 :12] = 2018\nnum_trip['year'][13:24] = 2019\nnum_trip['year'][25:36] = 2020\nnum_trip['year'][37:48] = 2021\nnum_trip['year'][49:60] = 2022\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_18160\\870468280.py:2: FutureWarning:\n\nChainedAssignmentError: behaviour will change in pandas 3.0!\nYou are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\nA typical example is when you are setting values in a column of a DataFrame, like:\n\ndf[\"col\"][row_indexer] = value\n\nUse `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_18160\\870468280.py:2: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_18160\\870468280.py:3: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_18160\\870468280.py:4: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_18160\\870468280.py:5: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_18160\\870468280.py:6: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n\n\n\n\n\n\n# str.replace()를 사용해서 맨 마지막 글자인 '월'을 ''로 변경\n# astype('int')를 사용하여 int값으로 형 변환\nnum_trip['month'] = num_trip['month'].str.replace('월','')\nnum_trip['month'] = num_trip['month'].astype('int')\n\n\n\n\n\n# loc을 사용하여 nr 컬럼의 값이 \"-\"인 nr열의 값에 np.nan을 할당\nnum_trip.loc[num_trip[\"nr\"] == \"-\", [\"nr\"]] = np.nan\n\n\n\n\n\n\n\n# to_excel()을 사용하여 DataFrame을 xlsx파일 형태로 저장\n# index=False : Unnamed: 0 이라는 임의의 인덱스가 생성되는 것을 방지\nnum_trip.to_excel(excel_writer = 'C:/Users/USER/Documents/LS빅데이터스쿨/PORTFOLIO/pre_data/p_num_trip.xlsx', index=False)"
  },
  {
    "objectID": "pjts/project1-3/index.html#data-visualization-데이터-시각화",
    "href": "pjts/project1-3/index.html#data-visualization-데이터-시각화",
    "title": "국내 여행 횟수",
    "section": "Data Visualization : 데이터 시각화",
    "text": "Data Visualization : 데이터 시각화\n\npandas와 numpy 라이브러리 호출\n\n# 라이브러리 호출\nimport pandas as pd\nimport numpy as np\n\n\n\npd.read_excel()을 사용해 전처리 된 데이터 불러오기\n\n# 전처리 된 데이터 불러오기\np_num_trip = pd.read_excel('C:/Users/USER/Documents/LS빅데이터스쿨/PORTFOLIO/pre_data/p_num_trip.xlsx')\n\n\n\np_num_trip.xlsx 데이터의 정보 확인하기 - info(), shape, head(), tail(), describe() 이용\n\np_num_trip.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 60 entries, 0 to 59\nData columns (total 20 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   year           60 non-null     int64  \n 1   month          60 non-null     int64  \n 2   total          60 non-null     int64  \n 3   male           60 non-null     int64  \n 4   female         60 non-null     int64  \n 5   elmt           60 non-null     int64  \n 6   mid            60 non-null     int64  \n 7   high           60 non-null     int64  \n 8   univ+          60 non-null     int64  \n 9   per1           60 non-null     int64  \n 10  per2           60 non-null     int64  \n 11  per3+          60 non-null     int64  \n 12  teens          60 non-null     int64  \n 13  young_adults   60 non-null     int64  \n 14  middle_adults  60 non-null     int64  \n 15  seniors        60 non-null     int64  \n 16  l_sal          60 non-null     int64  \n 17  m_sal          60 non-null     int64  \n 18  h_sal          60 non-null     int64  \n 19  nr             12 non-null     float64\ndtypes: float64(1), int64(19)\nmemory usage: 9.5 KB\n\n\n\np_num_trip.shape\n\n(60, 20)\n\n\n\np_num_trip.head()\n\n\n\n\n\n\n\n\nyear\nmonth\ntotal\nmale\nfemale\nelmt\nmid\nhigh\nuniv+\nper1\nper2\nper3+\nteens\nyoung_adults\nmiddle_adults\nseniors\nl_sal\nm_sal\nh_sal\nnr\n\n\n\n\n0\n2018\n1\n24233\n13019\n11214\n322\n1326\n8980\n13604\n2902\n4946\n16384\n1267\n8113\n10362\n4491\n1925\n12005\n10148\n156.0\n\n\n1\n2018\n2\n28263\n14868\n13396\n567\n1476\n11288\n14931\n3286\n6075\n18902\n1370\n9087\n12154\n5651\n1798\n15334\n10982\n149.0\n\n\n2\n2018\n3\n24668\n12768\n11900\n565\n1806\n8723\n13575\n3368\n5504\n15796\n1110\n8645\n9875\n5039\n1912\n13060\n9545\n149.0\n\n\n3\n2018\n4\n24242\n12099\n12143\n482\n1668\n8810\n13281\n3058\n5590\n15594\n1111\n8607\n9052\n5473\n2173\n12848\n9082\n139.0\n\n\n4\n2018\n5\n24571\n12607\n11965\n912\n1596\n9064\n13000\n3142\n5096\n16334\n1232\n7960\n9774\n5606\n2086\n12881\n9348\n255.0\n\n\n\n\n\n\n\n\np_num_trip.tail()\n\n\n\n\n\n\n\n\nyear\nmonth\ntotal\nmale\nfemale\nelmt\nmid\nhigh\nuniv+\nper1\nper2\nper3+\nteens\nyoung_adults\nmiddle_adults\nseniors\nl_sal\nm_sal\nh_sal\nnr\n\n\n\n\n55\n2022\n8\n25248\n12229\n13019\n374\n930\n8311\n15633\n3194\n5249\n16805\n1090\n9237\n10507\n4414\n1449\n11027\n12772\nNaN\n\n\n56\n2022\n9\n26525\n13373\n13152\n508\n1060\n9127\n15830\n3519\n6387\n16619\n949\n9102\n10877\n5598\n1352\n12321\n12853\nNaN\n\n\n57\n2022\n10\n24411\n11936\n12475\n458\n806\n8272\n14875\n3431\n5424\n15556\n668\n8737\n10059\n4948\n1395\n10807\n12210\nNaN\n\n\n58\n2022\n11\n23434\n11405\n12029\n531\n769\n7766\n14368\n3189\n5456\n14788\n610\n8186\n9737\n4900\n1552\n9722\n12159\nNaN\n\n\n59\n2022\n12\n22988\n11500\n11488\n538\n867\n7477\n14106\n3488\n5517\n13982\n878\n8479\n9228\n4403\n1290\n10768\n10930\nNaN\n\n\n\n\n\n\n\n\np_num_trip.describe()\n\n\n\n\n\n\n\n\nyear\nmonth\ntotal\nmale\nfemale\nelmt\nmid\nhigh\nuniv+\nper1\nper2\nper3+\nteens\nyoung_adults\nmiddle_adults\nseniors\nl_sal\nm_sal\nh_sal\nnr\n\n\n\n\ncount\n60.000000\n60.000000\n60.000000\n60.000000\n60.000000\n60.000000\n60.000000\n60.000000\n60.000000\n60.000000\n60.000000\n60.000000\n60.000000\n60.000000\n60.000000\n60.000000\n60.000000\n60.000000\n60.000000\n12.000000\n\n\nmean\n2020.000000\n6.500000\n23499.133333\n11873.550000\n11625.616667\n516.816667\n1096.483333\n8369.816667\n13515.933333\n3003.816667\n5115.950000\n15379.366667\n899.066667\n8643.333333\n9709.166667\n4247.566667\n1670.983333\n12459.050000\n9339.883333\n145.416667\n\n\nstd\n1.426148\n3.481184\n4580.214955\n2304.115503\n2321.201268\n258.558880\n443.281771\n2136.929038\n2081.333747\n479.954712\n1097.604594\n3094.381672\n362.865379\n1353.916800\n1950.671785\n1152.287134\n697.929905\n2816.137374\n1928.204672\n52.531304\n\n\nmin\n2018.000000\n1.000000\n12698.000000\n6586.000000\n6111.000000\n197.000000\n403.000000\n4337.000000\n7735.000000\n2047.000000\n2496.000000\n8154.000000\n365.000000\n5218.000000\n5009.000000\n2033.000000\n713.000000\n7488.000000\n4497.000000\n52.000000\n\n\n25%\n2019.000000\n3.750000\n20137.000000\n10179.750000\n9866.000000\n314.250000\n745.000000\n6736.500000\n12439.250000\n2644.500000\n4350.750000\n13187.000000\n604.750000\n7918.000000\n8310.750000\n3385.500000\n1148.750000\n10510.250000\n8538.000000\n123.750000\n\n\n50%\n2020.000000\n6.500000\n24109.000000\n11758.000000\n11932.500000\n451.000000\n893.000000\n8208.500000\n13431.000000\n3029.500000\n5176.000000\n15599.000000\n774.000000\n8593.500000\n9793.000000\n4429.000000\n1391.500000\n11389.500000\n9446.000000\n149.000000\n\n\n75%\n2021.000000\n9.250000\n25572.500000\n13024.500000\n13012.250000\n680.250000\n1479.750000\n9789.000000\n14651.000000\n3280.750000\n5782.750000\n17039.750000\n1202.750000\n9204.500000\n10878.500000\n5106.250000\n2186.000000\n14458.750000\n10806.250000\n160.250000\n\n\nmax\n2022.000000\n12.000000\n34251.000000\n16950.000000\n17300.000000\n1217.000000\n2048.000000\n12805.000000\n18555.000000\n4185.000000\n7714.000000\n22652.000000\n1763.000000\n12493.000000\n14642.000000\n6840.000000\n3931.000000\n19596.000000\n12853.000000\n255.000000\n\n\n\n\n\n\n\n\n\n분석을 용이하게 하기 위해 query()를 사용하여 각 년도별 행을 추출하여 DataFrame생성\n\ny2018 = p_num_trip.query('year == 2018')\ny2019 = p_num_trip.query('year == 2019')\ny2020 = p_num_trip.query('year == 2020')\ny2021 = p_num_trip.query('year == 2021')\ny2022 = p_num_trip.query('year == 2022')\n\n\n\n\n그래프를 그리기 위해 matplotlib.pyplot 라이브러리 호출\n\nimport matplotlib.pyplot as plt\n\n\n\n그래프에 한글 출력 가능하게 하기 위해 rcParams(runtime configuration) 딕셔너리 설정\n\nplt.rcParams['font.family'] ='Malgun Gothic'\n\n\n\n1. 2018년도 부터 2022년도 까지 5년간 연령별 여행 횟수 증감의 트랜드 구하기\n\n# 그래프의 x축과 y축의 데이터 값 만들기\n# for x in range 구문을 이용하여 다음과 같은 반복문을 실행, 년간 연령대 별 여행 횟수의 합을 구하는 것을 2018년부터 2022년까지 반복한다.\nteens_total = [x['teens'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nyoung_adults_total = [x['young_adults'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nmiddle_adults_total = [x['middle_adults'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nseniors_adults_total = [x['seniors'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nyears = [2018,2019,2020,2021,2022]\n\n# title(), ylabel(), xlabel()을 사용하여 그래프의 제목과 x, y축 레이블 설정\nplt.title(\"2018년 ~ 2022년 연령대 별 여행 횟수\")\nplt.ylabel(\"단위 : 천회\")\nplt.xlabel(\"단위 : 년\")\n\n# 그래프 그리기\n# x_range : year의 길이 만큼 x축의 범위를 설정\n# x_range + c : 그래프가 그려지는 위치값을 조절\n# width : 그래프의 너비 설정\n# label : 범례 표시\n# color : 그래프의 색상 표시\nx_range = np.arange(len(years))\nplt.bar(x_range+0.0, teens_total, width=0.2, label='청소년(15~19세)', color = 'lawngreen')\nplt.bar(x_range+0.2, young_adults_total, width=0.2, label='청년(2~30대)', color = 'blue')\nplt.bar(x_range+0.4, middle_adults_total, width=0.2, label='중년(4~50대)', color = 'red')\nplt.bar(x_range+0.6, seniors_adults_total, width=0.2, label='노년(6~70대 이상)', color = 'gray')\n\n# x축 눈금 설정\n# x_ticks()을 사용하여 x_range(0~0.6)의 중간(0.3)으로 눈금의 위치를 옮기고, 각 해당 위치에 해당하는 레이블을 years로 지정하여 년도가 함께 표시되도록 지정\nplt.xticks(x_range+0.3, years)\n\n# legend()를 사용하여 범례 추가\nplt.legend()\n\n# 그래프 보여주기\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n\n2. 2018년도 부터 2022년도 까지 5년간 가구원 수 별 여행 횟수 증감의 트랜드 구하기\n\n# 그래프의 x축과 y축의 데이터 값 만들기\n# for x in range 구문을 이용하여 다음과 같은 반복문을 실행, 년간 가구원 수 별 여행 횟수의 합을 구하는 것을 2018년부터 2022년까지 반복한다.\nper1_total = [x['per1'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nper2_total = [x['per2'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nper3_total = [x['per3+'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nyears = [2018,2019,2020,2021,2022]\n\n# title(), ylabel(), xlabel()을 사용하여 그래프의 제목과 x, y축 레이블 설정\nplt.title(\"2018년 ~ 2022년 가구원 수 별 여행 횟수\")\nplt.ylabel(\"단위 : 천회\")\nplt.xlabel(\"단위 : 년\")\n\n# 그래프 그리기\n# x_range : year의 길이 만큼 x축의 범위를 설정\n# x_range + c : 그래프가 그려지는 위치값을 조절\n# width : 그래프의 너비 설정\n# label : 범례 표시\n# color : 그래프의 색상 표시\nx_range = np.arange(len(years))\nplt.bar(x_range+0.0, per1_total, width=0.2, label='1인 가구', color = 'slateblue')\nplt.bar(x_range+0.2, per2_total, width=0.2, label='2인 가구', color = 'coral')\nplt.bar(x_range+0.4, per3_total, width=0.2, label='3인 이상 가구', color = 'teal')\n\n# x축 눈금 설정\n# x_ticks()을 사용하여 x_range(0~0.4)의 중간(0.2)으로 눈금의 위치를 옮기고, 각 해당 위치에 해당하는 레이블을 years로 지정하여 년도가 함께 표시되도록 지정\nplt.xticks(x_range+0.2, years) \n\n# 범례추가\nplt.legend()\n\n# 그래프 보여주기\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;"
  },
  {
    "objectID": "pjts/project1-3/index.html#결론",
    "href": "pjts/project1-3/index.html#결론",
    "title": "Project1-3. 국내 여행 횟수",
    "section": "결론",
    "text": "결론\n\n2020년 모든 연령대 및 가구원에서 여행 횟수가 감소했음, 이는 코로나의 영향으로 보임. 2021년과 2022년에는 여행 횟수가 증가하는 경향을 보였으나 여전히 2019년 수준에 미치지 못함\n2018 ~ 2022 총 5년간 중년(4-50)대의 여행 횟수가 가장 많고, 청년(2-30대)과 노년(6-70)대가 그 뒤를 따르며 청소년이 가장 낮은 여행 횟수를 가짐.\n2018 ~ 2022 총 5년간 모든 년도에서 3인이상 가구 유형의 여행 횟수가 가장 많으며, 2인 가구와 1인가구가 그 뒤를 따름"
  },
  {
    "objectID": "pjts/project1-4/index.html",
    "href": "pjts/project1-4/index.html",
    "title": "Project1-4.여행을 선택하는 이유",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# 파일 불러오기\ndf = pd.read_excel(\"C:/Users/USER/Documents/LS빅데이터스쿨/PORTFOLIO/data/select.xlsx\")\ndf.head()\n\n# 변수 변경\ndf = df.rename(columns = {\"소계\" : \"total\", \"남자\" : \"male\", \"여자\" : \"female\"})\ndf.head()\n\n\n\n\n\n\n\n\n시점\n항목\ntotal\nmale\nfemale\n15~19세\n20대\n30대\n40대\n50대\n...\n2인\n3인이상\n100만원 미만\n100~200만원 미만\n200~300만원 미만\n300~400만원 미만\n400~500만원 미만\n500~600만원 미만\n600만원 이상\n무응답\n\n\n\n\n0\n2018\n볼거리 제공\n18.0\n19.0\n17.1\n18.9\n19.3\n18.0\n17.6\n18.8\n...\n17.8\n18.4\n21.2\n14.7\n17.9\n18.2\n18.6\n18.4\n17.7\n20.5\n\n\n1\n2018\n여행지 지명도\n18.0\n16.6\n19.4\n17.4\n16.3\n18.4\n20.8\n18.5\n...\n16.8\n18.5\n14.8\n16.5\n15.7\n17.3\n19.1\n18.0\n20.3\n9.4\n\n\n2\n2018\n여행할 수 있는 시간\n8.0\n8.2\n7.8\n6.0\n9.0\n9.8\n7.0\n8.3\n...\n8.6\n7.9\n7.5\n6.1\n9.2\n7.3\n8.6\n8.2\n7.7\n4.5\n\n\n3\n2018\n이동 거리\n8.7\n9.5\n7.8\n9.9\n8.8\n7.9\n8.5\n8.9\n...\n9.5\n8.3\n7.2\n12.2\n8.2\n8.5\n9.1\n9.2\n6.7\n18.1\n\n\n4\n2018\n여행 동반자 유형\n8.2\n8.1\n8.2\n6.1\n8.2\n8.1\n7.3\n8.8\n...\n8.5\n7.8\n10.7\n7.6\n8.1\n8.0\n9.1\n8.1\n7.3\n9.9\n\n\n\n\n5 rows × 27 columns\n\n\n\n\n\n\n\n# 연령대\ndf[\"teens\"] = df[\"15~19세\"]\ndf[\"young_adults\"] = df[\"20대\"] + df[\"30대\"]\ndf[\"middle_adults\"] = df[\"40대\"] + df[\"50대\"]\ndf[\"senior\"] = df[\"60대\"] + df[\"70세 이상\"]\n\n#2018 각 값을 열의 합계로 나눈뒤 100을 곱하여 백분율 계산. 소수점 1까지 반올림\ndf.loc[0:14, \"young_adults\"] = (df.loc[0:14, \"young_adults\"] / df.loc[0:14, \"young_adults\"].sum() * 100).round(1)\ndf.loc[0:14, \"middle_adults\"] = (df.loc[0:14, \"middle_adults\"] / df.loc[0:14, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[0:14, \"senior\"] = (df.loc[0:14, \"senior\"] / df.loc[0:14, \"senior\"].sum() * 100).round(1)\n#2019\ndf.loc[15:29, \"young_adults\"] = (df.loc[15:29, \"young_adults\"] / df.loc[15:29, \"young_adults\"].sum() * 100).round(1)\ndf.loc[15:29, \"middle_adults\"] = (df.loc[15:29, \"middle_adults\"] / df.loc[15:29, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[15:29, \"senior\"] = (df.loc[15:29, \"senior\"] / df.loc[15:29, \"senior\"].sum() * 100).round(1)\n#2020\ndf.loc[30:44, \"young_adults\"] = (df.loc[30:44, \"young_adults\"] / df.loc[30:44, \"young_adults\"].sum() * 100).round(1)\ndf.loc[30:44, \"middle_adults\"] = (df.loc[30:44, \"middle_adults\"] / df.loc[30:44, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[30:44, \"senior\"] = (df.loc[30:44, \"senior\"] / df.loc[30:44, \"senior\"].sum() * 100).round(1)\n#2021\ndf.loc[45:59, \"young_adults\"] = (df.loc[45:59, \"young_adults\"] / df.loc[45:59, \"young_adults\"].sum() * 100).round(1)\ndf.loc[45:59, \"middle_adults\"] = (df.loc[45:59, \"middle_adults\"] / df.loc[45:59, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[45:59, \"senior\"] = (df.loc[45:59, \"senior\"] / df.loc[45:59, \"senior\"].sum() * 100).round(1)\n#2022\ndf.loc[60:74, \"young_adults\"] = (df.loc[60:74, \"young_adults\"] / df.loc[60:74, \"young_adults\"].sum() * 100).round(1)\ndf.loc[60:74, \"middle_adults\"] = (df.loc[60:74, \"middle_adults\"] / df.loc[60:74, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[60:74, \"senior\"] = (df.loc[60:74, \"senior\"] / df.loc[60:74, \"senior\"].sum() * 100).round(1)\n\ndf = df.drop(['15~19세', '20대', '30대', '40대', '50대', '60대', '70세 이상'], axis=1)\n\n\n\n\n\ndf[\"l_sal\"] = df[\"100만원 미만\"] + df[\"100~200만원 미만\"]\ndf[\"m_sal\"] = df[\"200~300만원 미만\"] + df[\"300~400만원 미만\"] + df[\"400~500만원 미만\"]\ndf[\"h_sal\"] = df[\"500~600만원 미만\"] + df[\"600만원 이상\"]\n#2018\ndf.loc[0:14, \"l_sal\"] = (df.loc[0:14, \"l_sal\"] / df.loc[0:14, \"l_sal\"].sum() * 100).round(1)\ndf.loc[0:14, \"m_sal\"] = (df.loc[0:14, \"m_sal\"] / df.loc[0:14, \"m_sal\"].sum() * 100).round(1)\ndf.loc[0:14, \"h_sal\"] = (df.loc[0:14, \"h_sal\"] / df.loc[0:14, \"h_sal\"].sum() * 100).round(1)\n#2019\ndf.loc[15:29, \"l_sal\"] = (df.loc[15:29, \"l_sal\"] / df.loc[15:29, \"l_sal\"].sum() * 100).round(1)\ndf.loc[15:29, \"m_sal\"] = (df.loc[15:29, \"m_sal\"] / df.loc[15:29, \"m_sal\"].sum() * 100).round(1)\ndf.loc[15:29, \"h_sal\"] = (df.loc[15:29, \"h_sal\"] / df.loc[15:29, \"h_sal\"].sum() * 100).round(1)\n#2020\ndf.loc[30:44, \"l_sal\"] = (df.loc[30:44, \"l_sal\"] / df.loc[30:44, \"l_sal\"].sum() * 100).round(1)\ndf.loc[30:44, \"m_sal\"] = (df.loc[30:44, \"m_sal\"] / df.loc[30:44, \"m_sal\"].sum() * 100).round(1)\ndf.loc[30:44, \"h_sal\"] = (df.loc[30:44, \"h_sal\"] / df.loc[30:44, \"h_sal\"].sum() * 100).round(1)\n#2021\ndf.loc[45:59, \"l_sal\"] = (df.loc[45:59, \"l_sal\"] / df.loc[45:59, \"l_sal\"].sum() * 100).round(1)\ndf.loc[45:59, \"m_sal\"] = (df.loc[45:59, \"m_sal\"] / df.loc[45:59, \"m_sal\"].sum() * 100).round(1)\ndf.loc[45:59, \"h_sal\"] = (df.loc[45:59, \"h_sal\"] / df.loc[45:59, \"h_sal\"].sum() * 100).round(1)\n#2022\ndf.loc[60:74, \"l_sal\"] = (df.loc[60:74, \"l_sal\"] / df.loc[60:74, \"l_sal\"].sum() * 100).round(1)\ndf.loc[60:74, \"m_sal\"] = (df.loc[60:74, \"m_sal\"] / df.loc[60:74, \"m_sal\"].sum() * 100).round(1)\ndf.loc[60:74, \"h_sal\"] = (df.loc[60:74, \"h_sal\"] / df.loc[60:74, \"h_sal\"].sum() * 100).round(1)\n\n\ndf = df.drop(['100만원 미만', '100~200만원 미만', '200~300만원 미만', '300~400만원 미만', '400~500만원 미만',\\\n                '500~600만원 미만', '600만원 이상'], axis=1)\n\n\n\n\n\n# 가구\ndf = df.rename(columns = { '1인' : 'per1',\n            '2인' : 'per2',\n            '3인이상' : 'per3+'})\n\n# 학벌\ndf = df.rename(columns = { '초졸 이하' : 'elmt',\n             '중학교' : 'mid',\n            '고등학교' : 'high',\n            '대학교이상' : 'univ+'})\n# 무응답 NR\ndf = df.rename(columns = {\"무응답\" : \"nr\",\n                        \"시점\" : \"year\",\n                        \"항목\" : \"item\"})\n                        \n# 데이터 전처리 결과 확인하기\ndf.head(5)\n\n\n\n\n\n\n\n\nyear\nitem\ntotal\nmale\nfemale\nelmt\nmid\nhigh\nuniv+\nper1\nper2\nper3+\nnr\nteens\nyoung_adults\nmiddle_adults\nsenior\nl_sal\nm_sal\nh_sal\n\n\n\n\n0\n2018\n볼거리 제공\n18.0\n19.0\n17.1\n19.4\n15.7\n17.6\n18.6\n16.8\n17.8\n18.4\n20.5\n18.9\n18.6\n18.2\n16.4\n18.0\n18.2\n18.0\n\n\n1\n2018\n여행지 지명도\n18.0\n16.6\n19.4\n13.0\n15.1\n18.8\n17.9\n17.4\n16.8\n18.5\n9.4\n17.4\n17.3\n19.6\n15.7\n15.7\n17.4\n19.1\n\n\n2\n2018\n여행할 수 있는 시간\n8.0\n8.2\n7.8\n6.1\n6.7\n7.5\n8.5\n7.4\n8.6\n7.9\n4.5\n6.0\n9.4\n7.6\n6.7\n6.8\n8.4\n7.9\n\n\n3\n2018\n이동 거리\n8.7\n9.5\n7.8\n13.8\n8.4\n8.7\n8.5\n9.1\n9.5\n8.3\n18.1\n9.9\n8.3\n8.7\n9.2\n9.7\n8.6\n7.9\n\n\n4\n2018\n여행 동반자 유형\n8.2\n8.1\n8.2\n8.4\n10.0\n8.5\n7.7\n9.5\n8.5\n7.8\n9.9\n6.1\n8.1\n8.0\n8.8\n9.2\n8.4\n7.7\n\n\n\n\n\n\n\n\n\n\n\n# 엑셀 파일로 내보내기\ndf.to_excel('C:/Users/USER/Documents/LS빅데이터스쿨/PORTFOLIO/pre_data/pre_select.xlsx', index=False)"
  },
  {
    "objectID": "pjts/project1-4/index.html#전처리",
    "href": "pjts/project1-4/index.html#전처리",
    "title": "Project1-4.여행을 선택하는 이유",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# 파일 불러오기\ndf = pd.read_excel(\"C:/Users/USER/Documents/LS빅데이터스쿨/PORTFOLIO/data/select.xlsx\")\ndf.head()\n\n# 변수 변경\ndf = df.rename(columns = {\"소계\" : \"total\", \"남자\" : \"male\", \"여자\" : \"female\"})\ndf.head()\n\n\n\n\n\n\n\n\n시점\n항목\ntotal\nmale\nfemale\n15~19세\n20대\n30대\n40대\n50대\n...\n2인\n3인이상\n100만원 미만\n100~200만원 미만\n200~300만원 미만\n300~400만원 미만\n400~500만원 미만\n500~600만원 미만\n600만원 이상\n무응답\n\n\n\n\n0\n2018\n볼거리 제공\n18.0\n19.0\n17.1\n18.9\n19.3\n18.0\n17.6\n18.8\n...\n17.8\n18.4\n21.2\n14.7\n17.9\n18.2\n18.6\n18.4\n17.7\n20.5\n\n\n1\n2018\n여행지 지명도\n18.0\n16.6\n19.4\n17.4\n16.3\n18.4\n20.8\n18.5\n...\n16.8\n18.5\n14.8\n16.5\n15.7\n17.3\n19.1\n18.0\n20.3\n9.4\n\n\n2\n2018\n여행할 수 있는 시간\n8.0\n8.2\n7.8\n6.0\n9.0\n9.8\n7.0\n8.3\n...\n8.6\n7.9\n7.5\n6.1\n9.2\n7.3\n8.6\n8.2\n7.7\n4.5\n\n\n3\n2018\n이동 거리\n8.7\n9.5\n7.8\n9.9\n8.8\n7.9\n8.5\n8.9\n...\n9.5\n8.3\n7.2\n12.2\n8.2\n8.5\n9.1\n9.2\n6.7\n18.1\n\n\n4\n2018\n여행 동반자 유형\n8.2\n8.1\n8.2\n6.1\n8.2\n8.1\n7.3\n8.8\n...\n8.5\n7.8\n10.7\n7.6\n8.1\n8.0\n9.1\n8.1\n7.3\n9.9\n\n\n\n\n5 rows × 27 columns\n\n\n\n\n\n\n\n# 연령대\ndf[\"teens\"] = df[\"15~19세\"]\ndf[\"young_adults\"] = df[\"20대\"] + df[\"30대\"]\ndf[\"middle_adults\"] = df[\"40대\"] + df[\"50대\"]\ndf[\"senior\"] = df[\"60대\"] + df[\"70세 이상\"]\n\n#2018 각 값을 열의 합계로 나눈뒤 100을 곱하여 백분율 계산. 소수점 1까지 반올림\ndf.loc[0:14, \"young_adults\"] = (df.loc[0:14, \"young_adults\"] / df.loc[0:14, \"young_adults\"].sum() * 100).round(1)\ndf.loc[0:14, \"middle_adults\"] = (df.loc[0:14, \"middle_adults\"] / df.loc[0:14, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[0:14, \"senior\"] = (df.loc[0:14, \"senior\"] / df.loc[0:14, \"senior\"].sum() * 100).round(1)\n#2019\ndf.loc[15:29, \"young_adults\"] = (df.loc[15:29, \"young_adults\"] / df.loc[15:29, \"young_adults\"].sum() * 100).round(1)\ndf.loc[15:29, \"middle_adults\"] = (df.loc[15:29, \"middle_adults\"] / df.loc[15:29, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[15:29, \"senior\"] = (df.loc[15:29, \"senior\"] / df.loc[15:29, \"senior\"].sum() * 100).round(1)\n#2020\ndf.loc[30:44, \"young_adults\"] = (df.loc[30:44, \"young_adults\"] / df.loc[30:44, \"young_adults\"].sum() * 100).round(1)\ndf.loc[30:44, \"middle_adults\"] = (df.loc[30:44, \"middle_adults\"] / df.loc[30:44, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[30:44, \"senior\"] = (df.loc[30:44, \"senior\"] / df.loc[30:44, \"senior\"].sum() * 100).round(1)\n#2021\ndf.loc[45:59, \"young_adults\"] = (df.loc[45:59, \"young_adults\"] / df.loc[45:59, \"young_adults\"].sum() * 100).round(1)\ndf.loc[45:59, \"middle_adults\"] = (df.loc[45:59, \"middle_adults\"] / df.loc[45:59, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[45:59, \"senior\"] = (df.loc[45:59, \"senior\"] / df.loc[45:59, \"senior\"].sum() * 100).round(1)\n#2022\ndf.loc[60:74, \"young_adults\"] = (df.loc[60:74, \"young_adults\"] / df.loc[60:74, \"young_adults\"].sum() * 100).round(1)\ndf.loc[60:74, \"middle_adults\"] = (df.loc[60:74, \"middle_adults\"] / df.loc[60:74, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[60:74, \"senior\"] = (df.loc[60:74, \"senior\"] / df.loc[60:74, \"senior\"].sum() * 100).round(1)\n\ndf = df.drop(['15~19세', '20대', '30대', '40대', '50대', '60대', '70세 이상'], axis=1)\n\n\n\n\n\ndf[\"l_sal\"] = df[\"100만원 미만\"] + df[\"100~200만원 미만\"]\ndf[\"m_sal\"] = df[\"200~300만원 미만\"] + df[\"300~400만원 미만\"] + df[\"400~500만원 미만\"]\ndf[\"h_sal\"] = df[\"500~600만원 미만\"] + df[\"600만원 이상\"]\n#2018\ndf.loc[0:14, \"l_sal\"] = (df.loc[0:14, \"l_sal\"] / df.loc[0:14, \"l_sal\"].sum() * 100).round(1)\ndf.loc[0:14, \"m_sal\"] = (df.loc[0:14, \"m_sal\"] / df.loc[0:14, \"m_sal\"].sum() * 100).round(1)\ndf.loc[0:14, \"h_sal\"] = (df.loc[0:14, \"h_sal\"] / df.loc[0:14, \"h_sal\"].sum() * 100).round(1)\n#2019\ndf.loc[15:29, \"l_sal\"] = (df.loc[15:29, \"l_sal\"] / df.loc[15:29, \"l_sal\"].sum() * 100).round(1)\ndf.loc[15:29, \"m_sal\"] = (df.loc[15:29, \"m_sal\"] / df.loc[15:29, \"m_sal\"].sum() * 100).round(1)\ndf.loc[15:29, \"h_sal\"] = (df.loc[15:29, \"h_sal\"] / df.loc[15:29, \"h_sal\"].sum() * 100).round(1)\n#2020\ndf.loc[30:44, \"l_sal\"] = (df.loc[30:44, \"l_sal\"] / df.loc[30:44, \"l_sal\"].sum() * 100).round(1)\ndf.loc[30:44, \"m_sal\"] = (df.loc[30:44, \"m_sal\"] / df.loc[30:44, \"m_sal\"].sum() * 100).round(1)\ndf.loc[30:44, \"h_sal\"] = (df.loc[30:44, \"h_sal\"] / df.loc[30:44, \"h_sal\"].sum() * 100).round(1)\n#2021\ndf.loc[45:59, \"l_sal\"] = (df.loc[45:59, \"l_sal\"] / df.loc[45:59, \"l_sal\"].sum() * 100).round(1)\ndf.loc[45:59, \"m_sal\"] = (df.loc[45:59, \"m_sal\"] / df.loc[45:59, \"m_sal\"].sum() * 100).round(1)\ndf.loc[45:59, \"h_sal\"] = (df.loc[45:59, \"h_sal\"] / df.loc[45:59, \"h_sal\"].sum() * 100).round(1)\n#2022\ndf.loc[60:74, \"l_sal\"] = (df.loc[60:74, \"l_sal\"] / df.loc[60:74, \"l_sal\"].sum() * 100).round(1)\ndf.loc[60:74, \"m_sal\"] = (df.loc[60:74, \"m_sal\"] / df.loc[60:74, \"m_sal\"].sum() * 100).round(1)\ndf.loc[60:74, \"h_sal\"] = (df.loc[60:74, \"h_sal\"] / df.loc[60:74, \"h_sal\"].sum() * 100).round(1)\n\n\ndf = df.drop(['100만원 미만', '100~200만원 미만', '200~300만원 미만', '300~400만원 미만', '400~500만원 미만',\\\n                '500~600만원 미만', '600만원 이상'], axis=1)\n\n\n\n\n\n# 가구\ndf = df.rename(columns = { '1인' : 'per1',\n            '2인' : 'per2',\n            '3인이상' : 'per3+'})\n\n# 학벌\ndf = df.rename(columns = { '초졸 이하' : 'elmt',\n             '중학교' : 'mid',\n            '고등학교' : 'high',\n            '대학교이상' : 'univ+'})\n# 무응답 NR\ndf = df.rename(columns = {\"무응답\" : \"nr\",\n                        \"시점\" : \"year\",\n                        \"항목\" : \"item\"})\ndf.info()\ndf.columns\n\n# 엑셀 파일로 내보내기\ndf.to_excel('C:/Users/USER/Documents/LS빅데이터스쿨/PORTFOLIO/pre_data/pre_select.xlsx', index=False)\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 75 entries, 0 to 74\nData columns (total 20 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   year           75 non-null     int64  \n 1   item           75 non-null     object \n 2   total          75 non-null     float64\n 3   male           75 non-null     float64\n 4   female         75 non-null     float64\n 5   elmt           75 non-null     float64\n 6   mid            75 non-null     float64\n 7   high           75 non-null     float64\n 8   univ+          75 non-null     float64\n 9   per1           75 non-null     float64\n 10  per2           75 non-null     float64\n 11  per3+          75 non-null     float64\n 12  nr             15 non-null     float64\n 13  teens          75 non-null     float64\n 14  young_adults   75 non-null     float64\n 15  middle_adults  75 non-null     float64\n 16  senior         75 non-null     float64\n 17  l_sal          75 non-null     float64\n 18  m_sal          75 non-null     float64\n 19  h_sal          75 non-null     float64\ndtypes: float64(18), int64(1), object(1)\nmemory usage: 11.8+ KB"
  },
  {
    "objectID": "pjts/project1-4/index.html#년도별-여행지-선택-5순위",
    "href": "pjts/project1-4/index.html#년도별-여행지-선택-5순위",
    "title": "Project1-4.여행을 선택하는 이유",
    "section": "년도별 여행지 선택 5순위",
    "text": "년도별 여행지 선택 5순위\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\n# 한글 설정\nplt.rcParams['font.family'] ='Malgun Gothic'\nplt.rcParams['axes.unicode_minus'] =False\n\ndf = pd.read_excel(\"C:/Users/USER/Documents/LS빅데이터스쿨/PORTFOLIO/pre_data/pre_select.xlsx\")\ndf\n\ndf_2018 = df.loc[0:14]\ndf_2019 = df.loc[15:29]\ndf_2020 = df.loc[30:44]\ndf_2021 = df.loc[45:59]\ndf_2022 = df.loc[60:74]\n\ntotal_2018 = df_2018.sort_values(\"total\", ascending = False).head()\ntotal_2019 = df_2019.sort_values(\"total\", ascending = False).head()\ntotal_2020 = df_2020.sort_values(\"total\", ascending = False).head()\ntotal_2021 = df_2021.sort_values(\"total\", ascending = False).head()\ntotal_2022 = df_2022.sort_values(\"total\", ascending = False).head()\n\ntotal_all = pd.concat([total_2018, total_2019, total_2020, total_2021, total_2022]).iloc[:, :3]\ntotal_all_pivot = total_all.pivot(index='year', columns='item', values='total')\n\n\nfig = px.bar(total_all_pivot, title='년도별 여행지 선택 5순위', labels={'value': '총합', 'year': '년도'})\n# 레이아웃 설정\nfig.update_layout(\n    xaxis_title='년도',\n    yaxis_title='총합',\n    legend_title_text='Item',\n    legend=dict(\n        x=1,  # x 위치 (1은 그래프의 가장 오른쪽)\n        y=1,  # y 위치 (1은 그래프의 가장 위쪽)\n        xanchor='left',  # x 기준점\n        yanchor='top'  # y 기준점\n    )\n)\n\nfig.show()"
  },
  {
    "objectID": "pjts/project1-4/index.html#여행을-선택하는-이유",
    "href": "pjts/project1-4/index.html#여행을-선택하는-이유",
    "title": "Project1-4.여행을 선택하는 이유",
    "section": "여행을 선택하는 이유",
    "text": "여행을 선택하는 이유\n\nfrom matplotlib.ticker import MaxNLocator\n\n#선 그래프\nvisualappeal = total_all.query(\"item == '볼거리 제공'\")\nPopularity = total_all.query(\"item == '여행지 지명도'\")\ntime = total_all.query(\"item == '여행할 수 있는 시간'\")\n\n\n# 선 그래프 생성\nplt.figure(figsize=(10, 6))\nplt.plot(visualappeal[\"year\"], visualappeal[\"total\"], marker='o',label=\"볼거리 제공\")\nplt.plot(Popularity[\"year\"], Popularity[\"total\"], marker='o',label=\"여행지 지명도\")\nplt.plot(time[\"year\"], time[\"total\"], marker='o',label=\"여행할 수 있는 시간\")\n\n\n# 그래프에 제목과 축 레이블 추가\nplt.title(\"여행을 선택하는 이유 - 전체\")\nplt.xlabel(\"년도\")\nplt.ylabel(\"전체 %\")\nplt.legend(fontsize='x-small',loc='center left')\nplt.gca().xaxis.set_major_locator(MaxNLocator(integer=True))\nplt.show()"
  },
  {
    "objectID": "pjts/project1-4/index.html#결론",
    "href": "pjts/project1-4/index.html#결론",
    "title": "Project1-4.여행을 선택하는 이유",
    "section": "결론",
    "text": "결론\n여행지 선택 이유로는 볼거리 제공과 여행지 지명도가 가장 많은 비중을 차지. 그러나 2019년에 들어서면서 여행할 수 있는 시간이 중요한 이유로 급부상. 이러한 변화는 여행객들의 가치관이 변화하고 있음을 시사."
  },
  {
    "objectID": "project.html",
    "href": "project.html",
    "title": "Project",
    "section": "",
    "text": "Project1-1. 여행 정보 획득 경로\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProject1-2. 지역별 관광지 검색 순위\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProject1-3. 국내 여행 횟수\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProject1-4.여행을 선택하는 이유\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "pjts/project1-3/index.html#데이터-전처리",
    "href": "pjts/project1-3/index.html#데이터-전처리",
    "title": "Project1-3. 국내 여행 횟수",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n# header를 두번째 행으로 고정, 첫번째 행에는 불필요한 정보가 들어있기 때문\nnum_trip = pd.read_excel('C:/Users/USER/Documents/LS빅데이터스쿨/PORTFOLIO/data/R_월별_국내여행_횟수_20240714204514.xlsx', header=1)\n\n\n\n\n\n# 시점\nnum_trip = num_trip.rename(columns = { '시점' : 'year', '항목' : 'month'})\n\n# 전체\nnum_trip = num_trip.rename(columns = { '소계' : 'total'})\n\n# 성별\nnum_trip = num_trip.rename(columns = { '남자' : 'male', '여자' :'female'})\n\n\n# 학력\nnum_trip = num_trip.rename(columns = { '초졸 이하' : 'elmt', '중학교' : 'mid',\n                                       '고등학교' : 'high', '대학교이상' : 'univ+'})\n\n# 가구원수\nnum_trip = num_trip.rename(columns = { '1인' : 'per1',\n                                       '2인' : 'per2',\n                                       '3인이상' : 'per3+'})\n\n\n\n\n\n# 연령 - 15\\~19세, 20대, 30대, 40대, 50대, 60대, 70세 이상을 청소년, 청년, 중년, 노년 층으로 구분\nnum_trip[\"teens\"] = num_trip[\"15~19세\"]\nnum_trip[\"young_adults\"] = num_trip[\"20대\"] + num_trip[\"30대\"]\nnum_trip[\"middle_adults\"] = num_trip[\"40대\"] + num_trip[\"50대\"]\nnum_trip[\"seniors\"] = num_trip[\"60대\"] + num_trip[\"70세 이상\"]\n\n\n\n\n\n# 15~19세, 20대, 30대, 40대, 50대, 60대, 70세 이상 열 7개 삭제\nnum_trip = num_trip.drop(num_trip.columns[np.arange(5,12,1)], axis=1)\n\n\n\n\n\n# 저소득 \\~ 200 만원 / 중위소득 200\\~500 만원 / 고소득 500\\~600이상 / 무응답\nnum_trip[\"l_sal\"] = num_trip[\"100만원 미만\"]     + num_trip[\"100~200만원 미만\"]\nnum_trip[\"m_sal\"] = num_trip[\"200~300만원 미만\"] + num_trip[\"300~400만원 미만\"] + num_trip[\"400~500만원 미만\"]\nnum_trip[\"h_sal\"] = num_trip[\"500~600만원 미만\"] + num_trip[\"600만원 이상\"]\nnum_trip[\"nr\"]    = num_trip[\"무응답\"]\n\n\n\n\n\n# np.arrange를 사용하여 columns의 index 지정(24,32,1) 총 100만원 미만, 100\\~200만원 미만, 200\\~300만원 미만, 300\\~400만원 미만, 400\\~500만원 미만, 500\\~600만원 미만, 600만원 이상, 무응답 총 8열 삭제\nnum_trip = num_trip.drop(num_trip.columns[np.arange(24,32,1)], axis=1)\n\n\n\n\n\n# 임금봉급근로자, 고용원있는사업주, 고용원없는자영업자, 무급가족 종사자, 사무전문, 기술생산노무, 판매서비스, 자영업, 학생, 전업주부, 무직은퇴, 기타 총 12개의 열 삭제\n\n# drop()과 np.arrange를 사용하여 columns의 index 지정(5,17,1)\nnum_trip = num_trip.drop(num_trip.columns[np.arange(5,17,1)], axis=1)\n\n\n\n\n\n\n# year의 null값 index 범위를 지정하고 2018, 2019, 2020, 2021, 2022 값 할당\nnum_trip['year'][1 :12] = 2018\nnum_trip['year'][13:24] = 2019\nnum_trip['year'][25:36] = 2020\nnum_trip['year'][37:48] = 2021\nnum_trip['year'][49:60] = 2022\n\n# month의 type을 object에서 int로 형 변환 필요\n# str.replace()를 사용해서 맨 마지막 글자인 '월'을 ''로 변경\n# astype('int')를 사용하여 int값으로 형 변환\nnum_trip['month'] = num_trip['month'].str.replace('월','')\nnum_trip['month'] = num_trip['month'].astype('int')\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_2604\\1564370647.py:2: FutureWarning:\n\nChainedAssignmentError: behaviour will change in pandas 3.0!\nYou are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\nA typical example is when you are setting values in a column of a DataFrame, like:\n\ndf[\"col\"][row_indexer] = value\n\nUse `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_2604\\1564370647.py:2: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_2604\\1564370647.py:3: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_2604\\1564370647.py:4: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_2604\\1564370647.py:5: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_2604\\1564370647.py:6: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n\n\n\n\n\n\n# loc을 사용하여 nr 컬럼의 값이 \"-\"인 nr열의 값에 np.nan을 할당\nnum_trip.loc[num_trip[\"nr\"] == \"-\", [\"nr\"]] = np.nan\n\n# 데이터 전처리 결과 확인하기\nnum_trip.head(5)\n\n\n\n\n\n\n\n\nyear\nmonth\ntotal\nmale\nfemale\nelmt\nmid\nhigh\nuniv+\nper1\nper2\nper3+\nteens\nyoung_adults\nmiddle_adults\nseniors\nl_sal\nm_sal\nh_sal\nnr\n\n\n\n\n0\n2018.0\n1\n24233\n13019\n11214\n322\n1326\n8980\n13604\n2902\n4946\n16384\n1267\n8113\n10362\n4491\n1925\n12005\n10148\n156\n\n\n1\n2018.0\n2\n28263\n14868\n13396\n567\n1476\n11288\n14931\n3286\n6075\n18902\n1370\n9087\n12154\n5651\n1798\n15334\n10982\n149\n\n\n2\n2018.0\n3\n24668\n12768\n11900\n565\n1806\n8723\n13575\n3368\n5504\n15796\n1110\n8645\n9875\n5039\n1912\n13060\n9545\n149\n\n\n3\n2018.0\n4\n24242\n12099\n12143\n482\n1668\n8810\n13281\n3058\n5590\n15594\n1111\n8607\n9052\n5473\n2173\n12848\n9082\n139\n\n\n4\n2018.0\n5\n24571\n12607\n11965\n912\n1596\n9064\n13000\n3142\n5096\n16334\n1232\n7960\n9774\n5606\n2086\n12881\n9348\n255\n\n\n\n\n\n\n\n\n\n\n\n# to_excel()을 사용하여 DataFrame을 xlsx파일 형태로 저장\n# index=False : Unnamed: 0 이라는 임의의 인덱스가 생성되는 것을 방지\nnum_trip.to_excel(excel_writer = 'C:/Users/USER/Documents/LS빅데이터스쿨/PORTFOLIO/pre_data/p_num_trip.xlsx', index=False)"
  },
  {
    "objectID": "pjts/project1-3/index.html#년도-2022년도-5년간-연령별-여행-횟수-트랜드-구하기",
    "href": "pjts/project1-3/index.html#년도-2022년도-5년간-연령별-여행-횟수-트랜드-구하기",
    "title": "Project1-3. 국내 여행 횟수",
    "section": "1. 2018년도 ~ 2022년도 5년간 연령별 여행 횟수 트랜드 구하기",
    "text": "1. 2018년도 ~ 2022년도 5년간 연령별 여행 횟수 트랜드 구하기\n\n# 라이브러리 호출\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\n# 전처리 된 데이터 불러오기\np_num_trip = pd.read_excel('C:/Users/USER/Documents/LS빅데이터스쿨/PORTFOLIO/pre_data/p_num_trip.xlsx')\n\n\n# 분석을 용이하게 하기 위해 query()를 사용하여 각 년도별 행을 추출하여 DataFrame생성\ny2018 = p_num_trip.query('year == 2018')\ny2019 = p_num_trip.query('year == 2019')\ny2020 = p_num_trip.query('year == 2020')\ny2021 = p_num_trip.query('year == 2021')\ny2022 = p_num_trip.query('year == 2022')\n\n# 그래프에 한글 출력 가능하게 하기 위해 rcParams(runtimeconfiguration) 딕셔너리 설정\nplt.rcParams['font.family'] ='Malgun Gothic'\n\n# 그래프의 x축과 y축의 데이터 값 만들기\n# for x in range 구문을 이용하여 다음과 같은 반복문을 실행, 년간 연령대 별 여행 횟수의 합을 구하는 것을 2018년부터 2022년까지 반복한다.\nteens_total = [x['teens'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nyoung_adults_total = [x['young_adults'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nmiddle_adults_total = [x['middle_adults'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nseniors_adults_total = [x['seniors'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nyears = [2018,2019,2020,2021,2022]\n\n# title(), ylabel(), xlabel()을 사용하여 그래프의 제목과 x, y축 레이블 설정\nplt.title(\"2018년 ~ 2022년 연령대 별 여행 횟수\")\nplt.ylabel(\"단위 : 천회\")\nplt.xlabel(\"단위 : 년\")\n\n# 그래프 그리기\n# x_range : year의 길이 만큼 x축의 범위를 설정\n# x_range + c : 그래프가 그려지는 위치값을 조절\n# width : 그래프의 너비 설정\n# label : 범례 표시\n# color : 그래프의 색상 표시\nx_range = np.arange(len(years))\nplt.bar(x_range+0.0, teens_total, width=0.2, label='청소년(15~19세)', color = 'lawngreen')\nplt.bar(x_range+0.2, young_adults_total, width=0.2, label='청년(2~30대)', color = 'blue')\nplt.bar(x_range+0.4, middle_adults_total, width=0.2, label='중년(4~50대)', color = 'red')\nplt.bar(x_range+0.6, seniors_adults_total, width=0.2, label='노년(6~70대 이상)', color = 'gray')\n\n# x축 눈금 설정\n# x_ticks()을 사용하여 x_range(0~0.6)의 중간(0.3)으로 눈금의 위치를 옮기고, 각 해당 위치에 해당하는 레이블을 years로 지정하여 년도가 함께 표시되도록 지정\nplt.xticks(x_range+0.3, years)\n\n# legend()를 사용하여 범례 추가\nplt.legend()\n\n# 그래프 보여주기\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;"
  },
  {
    "objectID": "pjts/project1-3/index.html#년도-2022년도-5년간-가구원-수-별-여행-횟수-트랜드-구하기",
    "href": "pjts/project1-3/index.html#년도-2022년도-5년간-가구원-수-별-여행-횟수-트랜드-구하기",
    "title": "Project1-3. 국내 여행 횟수",
    "section": "2. 2018년도 ~ 2022년도 5년간 가구원 수 별 여행 횟수 트랜드 구하기",
    "text": "2. 2018년도 ~ 2022년도 5년간 가구원 수 별 여행 횟수 트랜드 구하기\n\n# 그래프의 x축과 y축의 데이터 값 만들기\n# for x in range 구문을 이용하여 다음과 같은 반복문을 실행, 년간 가구원 수 별 여행 횟수의 합을 구하는 것을 2018년부터 2022년까지 반복한다.\nper1_total = [x['per1'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nper2_total = [x['per2'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nper3_total = [x['per3+'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nyears = [2018,2019,2020,2021,2022]\n\n# title(), ylabel(), xlabel()을 사용하여 그래프의 제목과 x, y축 레이블 설정\nplt.title(\"2018년 ~ 2022년 가구원 수 별 여행 횟수\")\nplt.ylabel(\"단위 : 천회\")\nplt.xlabel(\"단위 : 년\")\n\n# 그래프 그리기\n# x_range : year의 길이 만큼 x축의 범위를 설정\n# x_range + c : 그래프가 그려지는 위치값을 조절\n# width : 그래프의 너비 설정\n# label : 범례 표시\n# color : 그래프의 색상 표시\nx_range = np.arange(len(years))\nplt.bar(x_range+0.0, per1_total, width=0.2, label='1인 가구', color = 'slateblue')\nplt.bar(x_range+0.2, per2_total, width=0.2, label='2인 가구', color = 'coral')\nplt.bar(x_range+0.4, per3_total, width=0.2, label='3인 이상 가구', color = 'teal')\n\n# x축 눈금 설정\n# x_ticks()을 사용하여 x_range(0~0.4)의 중간(0.2)으로 눈금의 위치를 옮기고, 각 해당 위치에 해당하는 레이블을 years로 지정하여 년도가 함께 표시되도록 지정\nplt.xticks(x_range+0.2, years) \n\n# 범례추가\nplt.legend()\n\n# 그래프 보여주기\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;"
  },
  {
    "objectID": "pjts/project1-1/index.html#데이터-전처리",
    "href": "pjts/project1-1/index.html#데이터-전처리",
    "title": "Project1-1. 여행 정보 획득 경로",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\n\nroute = pd.read_excel(\"C:/Users/USER/Documents/LS빅데이터스쿨/team3_project/youna/youna_route.xlsx\",header=1)\n\n\n\n\n\n# 연도 결측치 처리\nroute.loc[0:8,\"year\"] = \"2018\"\nroute.loc[9:17,\"year\"] = \"2019\"\nroute.loc[18:26,\"year\"] = \"2020\"\nroute.loc[27:35,\"year\"] = \"2021\"\nroute.loc[36:43,\"year\"] = \"2022\"\n\n# 결측치 제거\nroute.replace('-', np.nan, inplace=True)\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_700\\4045614584.py:9: FutureWarning:\n\nDowncasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n\n\n\n\n\n\n\n# 변수 영어로 변경\nroute = route.rename(columns = {\"시점\":\"year\", \"항목\":\"access_path\", \"소계\" : \"total\", \"남자\" : \"male\", \"여자\" : \"female\"})\n\n# 경로명 영어로 바꾸기 \nroute.loc[route[\"access_path\"]==\"과거 방문 경험\", \"access_path\"] = \"experience\"\nroute.loc[route[\"access_path\"]==\"주변인(친지/친구/동료 등)\", \"access_path\"] = \"acquaintance\"\nroute.loc[route[\"access_path\"]==\"인터넷 사이트/모바일 앱(PC/스마트폰)\", \"access_path\"] = \"internet_mobile_app\"\nroute.loc[route[\"access_path\"]==\"광고(TV/라디오/ 신문/잡지/ 지하철/옥외 광고판 등)\", \"access_path\"] = \"advertising\"\nroute.loc[route[\"access_path\"]==\"기사 및 방송 프로그램(TV/라디오/ 신문/잡지)\", \"access_path\"] = \"article_broadcast\"\nroute.loc[route[\"access_path\"]==\"관광 안내 서적\", \"access_path\"] = \"guidebook\"\nroute.loc[route[\"access_path\"]==\"여행사(방문, 전화)\", \"access_path\"] = \"travel_agency\"\nroute.loc[route[\"access_path\"]==\"정보 없이 방문\", \"access_path\"] = \"no_information\"\nroute.loc[route[\"access_path\"]==\"기타\", \"access_path\"] = \"etc\"\n\n# 가구 영어로 바꾸기\nroute = route.rename(columns = { '1인' : 'per1',\n                         '2인' : 'per2',\n                        '3인이상' : 'per3+'})\n                        \n# 학벌 영어로 바꾸기\nroute = route.rename(columns = { '초졸 이하' : 'elmt',\n                         '중학교' : 'mid',\n                        '고등학교' : 'high',\n                        '대학교이상' : 'univ+',\n                        })\n\n\n\n\n\n# 연령대\nroute[\"teens\"] = route[\"15~19세\"]   \nroute[\"young_adults\"] = route[\"20대\"] + route[\"30대\"]\nroute[\"middle_adults\"] = route[\"40대\"] + route[\"50대\"]\nroute[\"senior\"] = route[\"60대\"] + route[\"70세 이상\"]\n\n#2018\nroute.loc[0:8, \"young_adults\"]  = (route.loc[0:8, \"young_adults\"]  / route.loc[0:8, \"young_adults\"].sum() * 100).round(1)\nroute.loc[0:8, \"middle_adults\"] = (route.loc[0:8, \"middle_adults\"] / route.loc[0:8, \"middle_adults\"].sum() * 100).round(1)\nroute.loc[0:8, \"senior\"] = (route.loc[0:8, \"senior\"]        / route.loc[0:8, \"senior\"].sum() * 100).round(1)\n#2019\nroute.loc[9:17, \"young_adults\"]  = (route.loc[9:17, \"young_adults\"]  / route.loc[9:17, \"young_adults\"].sum() * 100).round(1)\nroute.loc[9:17, \"middle_adults\"] = (route.loc[9:17, \"middle_adults\"] / route.loc[9:17, \"middle_adults\"].sum() * 100).round(1)\nroute.loc[9:17, \"senior\"] = (route.loc[9:17, \"senior\"]        / route.loc[9:17, \"senior\"].sum() * 100).round(1)\n#2020\nroute.loc[18:26, \"young_adults\"]  = (route.loc[18:26, \"young_adults\"]  / route.loc[18:26, \"young_adults\"].sum() * 100).round(1)\nroute.loc[18:26, \"middle_adults\"]    = (route.loc[18:26, \"middle_adults\"] / route.loc[18:26, \"middle_adults\"].sum() * 100).round(1)\nroute.loc[18:26, \"senior\"] = (route.loc[18:26, \"senior\"]       / route.loc[18:26, \"senior\"].sum() * 100).round(1)\n#2021\nroute.loc[27:35, \"young_adults\"]  = (route.loc[27:35, \"young_adults\"]  / route.loc[27:35, \"young_adults\"].sum() * 100).round(1)\nroute.loc[27:35, \"middle_adults\"] = (route.loc[27:35, \"middle_adults\"] / route.loc[27:35, \"middle_adults\"].sum() * 100).round(1)\nroute.loc[27:35, \"senior\"] = (route.loc[27:35, \"senior\"]        / route.loc[27:35, \"senior\"].sum() * 100).round(1)\n#2022\nroute.loc[36:43, \"young_adults\"]  = (route.loc[36:43, \"young_adults\"]  / route.loc[36:43, \"young_adults\"].sum() * 100).round(1)\nroute.loc[36:43, \"middle_adults\"] = (route.loc[36:43, \"middle_adults\"] / route.loc[36:43, \"middle_adults\"].sum() * 100).round(1)\nroute.loc[36:43, \"senior\"] = (route.loc[36:43, \"senior\"]        / route.loc[36:43, \"senior\"].sum() * 100).round(1)\n\n\n#월급\nroute[\"l_sal\"] = route[\"100만원 미만\"] + route[\"100~200만원 미만\"]\nroute[\"m_sal\"] = route[\"200~300만원 미만\"] + route[\"300~400만원 미만\"] + route[\"400~500만원 미만\"]\nroute[\"h_sal\"] = route[\"500~600만원 미만\"] + route[\"600만원 이상\"]\nroute[\"nr\"]= route[\"무응답\"]\n\n#2018\nroute.loc[0:8, \"l_sal\"] = (route.loc[0:8, \"l_sal\"] / route.loc[0:8, \"l_sal\"].sum() * 100).round(1)\nroute.loc[0:8, \"m_sal\"] = (route.loc[0:8, \"m_sal\"] / route.loc[0:8, \"m_sal\"].sum() * 100).round(1)\nroute.loc[0:8, \"h_sal\"] = (route.loc[0:8, \"h_sal\"] / route.loc[0:8, \"h_sal\"].sum() * 100).round(1)\n#2019\nroute.loc[9:17, \"l_sal\"] = (route.loc[9:17, \"l_sal\"] / route.loc[9:17, \"l_sal\"].sum() * 100).round(1)\nroute.loc[9:17, \"m_sal\"] = (route.loc[9:17, \"m_sal\"] / route.loc[9:17, \"m_sal\"].sum() * 100).round(1)\nroute.loc[9:17, \"h_sal\"] = (route.loc[9:17, \"h_sal\"] / route.loc[9:17, \"h_sal\"].sum() * 100).round(1)\n#2020\nroute.loc[18:26, \"l_sal\"] = (route.loc[18:26, \"l_sal\"] / route.loc[18:26, \"l_sal\"].sum() * 100).round(1)\nroute.loc[18:26, \"m_sal\"] = (route.loc[18:26, \"m_sal\"] / route.loc[18:26, \"m_sal\"].sum() * 100).round(1)\nroute.loc[18:26, \"h_sal\"] = (route.loc[18:26, \"h_sal\"] / route.loc[18:26, \"h_sal\"].sum() * 100).round(1)\n#2021\nroute.loc[27:35, \"l_sal\"] = (route.loc[27:35, \"l_sal\"] / route.loc[27:35, \"l_sal\"].sum() * 100).round(1)\nroute.loc[27:35, \"m_sal\"] = (route.loc[27:35, \"m_sal\"] / route.loc[27:35, \"m_sal\"].sum() * 100).round(1)\nroute.loc[27:35, \"h_sal\"] = (route.loc[27:35, \"h_sal\"] / route.loc[27:35, \"h_sal\"].sum() * 100).round(1)\n#2022\nroute.loc[36:43, \"l_sal\"] = (route.loc[36:43, \"l_sal\"] / route.loc[36:43, \"l_sal\"].sum() * 100).round(1)\nroute.loc[36:43, \"m_sal\"] = (route.loc[36:43, \"m_sal\"] / route.loc[36:43, \"m_sal\"].sum() * 100).round(1)\nroute.loc[36:43, \"h_sal\"] = (route.loc[36:43, \"h_sal\"] / route.loc[36:43, \"h_sal\"].sum() * 100).round(1)\n\n\n\n\n\n# 나이\nroute = route.drop(['15~19세', '20대', '30대', '40대', '50대', '60대', '70세 이상'], axis=1)\n\n# 직업\nroute = route.drop(['임금봉급근로자', '고용원있는사업주', '고용원없는자영업자', \n                    '무급가족 종사자', '사무전문', '기술생산노무', '판매서비스',\n                    \"자영업\",\"전업주부\",\"학생\",\"무직은퇴\",\"기타\"], axis=1)\n                    \n# 월급                  \nroute = route.drop(['100만원 미만', '100~200만원 미만', '200~300만원 미만', '300~400만원 미만', '400~500만원 미만','500~600만원 미만', '600만원 이상', \"무응답\"], axis=1)\n\n\n# 데이터 전처리 결과 확인하기\nroute.head(5)\n\n\n\n\n\n\n\n\nyear\naccess_path\ntotal\nmale\nfemale\nelmt\nmid\nhigh\nuniv+\nper1\n...\nper3+\nyear\nteens\nyoung_adults\nmiddle_adults\nsenior\nl_sal\nm_sal\nh_sal\nnr\n\n\n\n\n0\n2018.0\nexperience\n24.0\n24.8\n23.2\n19.0\n23.2\n24.1\n24.2\n24.7\n...\n23.8\n2018\n18.8\n22.3\n26.2\n23.7\n24.2\n23.2\n25.4\n17.5\n\n\n1\nNaN\nacquaintance\n41.5\n40.4\n42.7\n45.8\n43.1\n44.8\n38.7\n43.9\n...\n40.5\n2018\n39.0\n39.5\n42.0\n45.2\n46.5\n42.0\n40.5\n39.4\n\n\n2\nNaN\ninternet_mobile_app\n8.9\n9.7\n8.2\n0.7\n1.5\n5.6\n12.6\n8.1\n...\n10.0\n2018\n12.7\n14.9\n6.5\n2.2\n1.5\n8.4\n10.4\n20.3\n\n\n3\nNaN\nadvertising\n3.8\n3.8\n3.9\n2.8\n2.1\n3.7\n4.2\n2.9\n...\n4.0\n2018\n3.3\n4.3\n3.5\n3.6\n2.5\n4.0\n3.9\n4.1\n\n\n4\nNaN\narticle_broadcast\n4.0\n3.7\n4.3\n0.7\n3.2\n4.2\n4.1\n4.0\n...\n4.3\n2018\n2.8\n4.2\n4.2\n3.3\n1.9\n4.3\n4.0\n2.6\n\n\n\n\n5 rows × 21 columns\n\n\n\n\n\n\n\nroute.to_excel('pre_route.xlsx', index=False)"
  },
  {
    "objectID": "pjts/project1-1/index.html#데이터-시각화",
    "href": "pjts/project1-1/index.html#데이터-시각화",
    "title": "Project1-1. 여행 정보 획득 경로",
    "section": "데이터 시각화",
    "text": "데이터 시각화\n\n1. 5개년 평균 경로 순위 막대그래프\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\n\n\npre_route = pd.read_excel(\"C:/Users/USER/Documents/LS빅데이터스쿨/team3_project/youna/pre_route.xlsx\")\n\n##1. 5개년 평균 경로 순위 구하기\nroute2=pre_route.groupby(\"access_path\")\\\n                .agg(total_mean = (\"total\",\"mean\"))\n\nroute2 = route2.sort_values([\"total_mean\"], ascending = False)\n\n##2. 그래프화 화기\nplt.clf()\nplt.rcParams['font.family'] ='Malgun Gothic'\nplt.subplots_adjust(bottom=0.2)\nsns.barplot(data=route2, x=\"access_path\", y=\"total_mean\", palette = \"Set1\")\nplt.xlabel('여행 정보 획득 경로')\nplt.ylabel('소계')\nplt.xticks(rotation=20)\nplt.xticks(fontsize=8)\nplt.title('5개년 평균 여행 정보 획득 경로',fontsize=15)\nplt.show()\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_700\\2622033830.py:19: FutureWarning:\n\n\n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n\n\n\n\n\n\n\n\n\n\n\n\n2. 연도별 정보 획득 경로 추이\n\nfrom matplotlib.ticker import MaxNLocator\n\npre_route = pd.read_excel(\"C:/Users/USER/Documents/LS빅데이터스쿨/team3_project/youna/pre_route.xlsx\")\n\nroute_path1 = pre_route.query(\"access_path=='acquaintance'\")\nroute_path2 = pre_route.query(\"access_path=='experience'\")\nroute_path3 = pre_route.query(\"access_path=='no_information'\")\nroute_path4 = pre_route.query(\"access_path=='internet_mobile_app'\")\n\nplt.clf()\nplt.plot(route_path1[\"year\"], route_path1[\"total\"], marker='o', label=\"지인 추천\")\nplt.plot(route_path2[\"year\"], route_path2[\"total\"], marker='o', label=\"과거경험\")\nplt.plot(route_path3[\"year\"], route_path3[\"total\"], marker='o', label=\"정보 없이 여행\")\nplt.plot(route_path4[\"year\"], route_path4[\"total\"], marker='o', label=\"인터넷 및 모바일앱\")\n\nplt.gca().xaxis.set_major_locator(MaxNLocator(integer=True))\n\nplt.subplots_adjust(right=0.71)\nplt.legend(loc='upper left', bbox_to_anchor=(1, 1),fontsize=7)\nplt.rcParams['font.family'] ='Malgun Gothic'\nplt.title('연도별 여행 정보 획득 경로',fontsize=15)\nplt.show()"
  },
  {
    "objectID": "pjts/project1-4/index.html#데이터-전처리",
    "href": "pjts/project1-4/index.html#데이터-전처리",
    "title": "Project1-4.여행을 선택하는 이유",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# 파일 불러오기\ndf = pd.read_excel(\"C:/Users/USER/Documents/LS빅데이터스쿨/PORTFOLIO/data/select.xlsx\")\ndf.head()\n\n# 변수 변경\ndf = df.rename(columns = {\"소계\" : \"total\", \"남자\" : \"male\", \"여자\" : \"female\"})\ndf.head()\n\n\n\n\n\n\n\n\n시점\n항목\ntotal\nmale\nfemale\n15~19세\n20대\n30대\n40대\n50대\n...\n2인\n3인이상\n100만원 미만\n100~200만원 미만\n200~300만원 미만\n300~400만원 미만\n400~500만원 미만\n500~600만원 미만\n600만원 이상\n무응답\n\n\n\n\n0\n2018\n볼거리 제공\n18.0\n19.0\n17.1\n18.9\n19.3\n18.0\n17.6\n18.8\n...\n17.8\n18.4\n21.2\n14.7\n17.9\n18.2\n18.6\n18.4\n17.7\n20.5\n\n\n1\n2018\n여행지 지명도\n18.0\n16.6\n19.4\n17.4\n16.3\n18.4\n20.8\n18.5\n...\n16.8\n18.5\n14.8\n16.5\n15.7\n17.3\n19.1\n18.0\n20.3\n9.4\n\n\n2\n2018\n여행할 수 있는 시간\n8.0\n8.2\n7.8\n6.0\n9.0\n9.8\n7.0\n8.3\n...\n8.6\n7.9\n7.5\n6.1\n9.2\n7.3\n8.6\n8.2\n7.7\n4.5\n\n\n3\n2018\n이동 거리\n8.7\n9.5\n7.8\n9.9\n8.8\n7.9\n8.5\n8.9\n...\n9.5\n8.3\n7.2\n12.2\n8.2\n8.5\n9.1\n9.2\n6.7\n18.1\n\n\n4\n2018\n여행 동반자 유형\n8.2\n8.1\n8.2\n6.1\n8.2\n8.1\n7.3\n8.8\n...\n8.5\n7.8\n10.7\n7.6\n8.1\n8.0\n9.1\n8.1\n7.3\n9.9\n\n\n\n\n5 rows × 27 columns\n\n\n\n\n\n\n\n# 연령대\ndf[\"teens\"] = df[\"15~19세\"]\ndf[\"young_adults\"] = df[\"20대\"] + df[\"30대\"]\ndf[\"middle_adults\"] = df[\"40대\"] + df[\"50대\"]\ndf[\"senior\"] = df[\"60대\"] + df[\"70세 이상\"]\n\n#2018 각 값을 열의 합계로 나눈뒤 100을 곱하여 백분율 계산. 소수점 1까지 반올림\ndf.loc[0:14, \"young_adults\"] = (df.loc[0:14, \"young_adults\"] / df.loc[0:14, \"young_adults\"].sum() * 100).round(1)\ndf.loc[0:14, \"middle_adults\"] = (df.loc[0:14, \"middle_adults\"] / df.loc[0:14, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[0:14, \"senior\"] = (df.loc[0:14, \"senior\"] / df.loc[0:14, \"senior\"].sum() * 100).round(1)\n#2019\ndf.loc[15:29, \"young_adults\"] = (df.loc[15:29, \"young_adults\"] / df.loc[15:29, \"young_adults\"].sum() * 100).round(1)\ndf.loc[15:29, \"middle_adults\"] = (df.loc[15:29, \"middle_adults\"] / df.loc[15:29, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[15:29, \"senior\"] = (df.loc[15:29, \"senior\"] / df.loc[15:29, \"senior\"].sum() * 100).round(1)\n#2020\ndf.loc[30:44, \"young_adults\"] = (df.loc[30:44, \"young_adults\"] / df.loc[30:44, \"young_adults\"].sum() * 100).round(1)\ndf.loc[30:44, \"middle_adults\"] = (df.loc[30:44, \"middle_adults\"] / df.loc[30:44, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[30:44, \"senior\"] = (df.loc[30:44, \"senior\"] / df.loc[30:44, \"senior\"].sum() * 100).round(1)\n#2021\ndf.loc[45:59, \"young_adults\"] = (df.loc[45:59, \"young_adults\"] / df.loc[45:59, \"young_adults\"].sum() * 100).round(1)\ndf.loc[45:59, \"middle_adults\"] = (df.loc[45:59, \"middle_adults\"] / df.loc[45:59, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[45:59, \"senior\"] = (df.loc[45:59, \"senior\"] / df.loc[45:59, \"senior\"].sum() * 100).round(1)\n#2022\ndf.loc[60:74, \"young_adults\"] = (df.loc[60:74, \"young_adults\"] / df.loc[60:74, \"young_adults\"].sum() * 100).round(1)\ndf.loc[60:74, \"middle_adults\"] = (df.loc[60:74, \"middle_adults\"] / df.loc[60:74, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[60:74, \"senior\"] = (df.loc[60:74, \"senior\"] / df.loc[60:74, \"senior\"].sum() * 100).round(1)\n\ndf = df.drop(['15~19세', '20대', '30대', '40대', '50대', '60대', '70세 이상'], axis=1)\n\n\n\n\n\ndf[\"l_sal\"] = df[\"100만원 미만\"] + df[\"100~200만원 미만\"]\ndf[\"m_sal\"] = df[\"200~300만원 미만\"] + df[\"300~400만원 미만\"] + df[\"400~500만원 미만\"]\ndf[\"h_sal\"] = df[\"500~600만원 미만\"] + df[\"600만원 이상\"]\n#2018\ndf.loc[0:14, \"l_sal\"] = (df.loc[0:14, \"l_sal\"] / df.loc[0:14, \"l_sal\"].sum() * 100).round(1)\ndf.loc[0:14, \"m_sal\"] = (df.loc[0:14, \"m_sal\"] / df.loc[0:14, \"m_sal\"].sum() * 100).round(1)\ndf.loc[0:14, \"h_sal\"] = (df.loc[0:14, \"h_sal\"] / df.loc[0:14, \"h_sal\"].sum() * 100).round(1)\n#2019\ndf.loc[15:29, \"l_sal\"] = (df.loc[15:29, \"l_sal\"] / df.loc[15:29, \"l_sal\"].sum() * 100).round(1)\ndf.loc[15:29, \"m_sal\"] = (df.loc[15:29, \"m_sal\"] / df.loc[15:29, \"m_sal\"].sum() * 100).round(1)\ndf.loc[15:29, \"h_sal\"] = (df.loc[15:29, \"h_sal\"] / df.loc[15:29, \"h_sal\"].sum() * 100).round(1)\n#2020\ndf.loc[30:44, \"l_sal\"] = (df.loc[30:44, \"l_sal\"] / df.loc[30:44, \"l_sal\"].sum() * 100).round(1)\ndf.loc[30:44, \"m_sal\"] = (df.loc[30:44, \"m_sal\"] / df.loc[30:44, \"m_sal\"].sum() * 100).round(1)\ndf.loc[30:44, \"h_sal\"] = (df.loc[30:44, \"h_sal\"] / df.loc[30:44, \"h_sal\"].sum() * 100).round(1)\n#2021\ndf.loc[45:59, \"l_sal\"] = (df.loc[45:59, \"l_sal\"] / df.loc[45:59, \"l_sal\"].sum() * 100).round(1)\ndf.loc[45:59, \"m_sal\"] = (df.loc[45:59, \"m_sal\"] / df.loc[45:59, \"m_sal\"].sum() * 100).round(1)\ndf.loc[45:59, \"h_sal\"] = (df.loc[45:59, \"h_sal\"] / df.loc[45:59, \"h_sal\"].sum() * 100).round(1)\n#2022\ndf.loc[60:74, \"l_sal\"] = (df.loc[60:74, \"l_sal\"] / df.loc[60:74, \"l_sal\"].sum() * 100).round(1)\ndf.loc[60:74, \"m_sal\"] = (df.loc[60:74, \"m_sal\"] / df.loc[60:74, \"m_sal\"].sum() * 100).round(1)\ndf.loc[60:74, \"h_sal\"] = (df.loc[60:74, \"h_sal\"] / df.loc[60:74, \"h_sal\"].sum() * 100).round(1)\n\n\ndf = df.drop(['100만원 미만', '100~200만원 미만', '200~300만원 미만', '300~400만원 미만', '400~500만원 미만',\\\n                '500~600만원 미만', '600만원 이상'], axis=1)\n\n\n\n\n\n# 가구\ndf = df.rename(columns = { '1인' : 'per1',\n            '2인' : 'per2',\n            '3인이상' : 'per3+'})\n\n# 학벌\ndf = df.rename(columns = { '초졸 이하' : 'elmt',\n             '중학교' : 'mid',\n            '고등학교' : 'high',\n            '대학교이상' : 'univ+'})\n# 무응답 NR\ndf = df.rename(columns = {\"무응답\" : \"nr\",\n                        \"시점\" : \"year\",\n                        \"항목\" : \"item\"})\n                        \n# 데이터 전처리 결과 확인하기\ndf.head(5)\n\n\n\n\n\n\n\n\nyear\nitem\ntotal\nmale\nfemale\nelmt\nmid\nhigh\nuniv+\nper1\nper2\nper3+\nnr\nteens\nyoung_adults\nmiddle_adults\nsenior\nl_sal\nm_sal\nh_sal\n\n\n\n\n0\n2018\n볼거리 제공\n18.0\n19.0\n17.1\n19.4\n15.7\n17.6\n18.6\n16.8\n17.8\n18.4\n20.5\n18.9\n18.6\n18.2\n16.4\n18.0\n18.2\n18.0\n\n\n1\n2018\n여행지 지명도\n18.0\n16.6\n19.4\n13.0\n15.1\n18.8\n17.9\n17.4\n16.8\n18.5\n9.4\n17.4\n17.3\n19.6\n15.7\n15.7\n17.4\n19.1\n\n\n2\n2018\n여행할 수 있는 시간\n8.0\n8.2\n7.8\n6.1\n6.7\n7.5\n8.5\n7.4\n8.6\n7.9\n4.5\n6.0\n9.4\n7.6\n6.7\n6.8\n8.4\n7.9\n\n\n3\n2018\n이동 거리\n8.7\n9.5\n7.8\n13.8\n8.4\n8.7\n8.5\n9.1\n9.5\n8.3\n18.1\n9.9\n8.3\n8.7\n9.2\n9.7\n8.6\n7.9\n\n\n4\n2018\n여행 동반자 유형\n8.2\n8.1\n8.2\n8.4\n10.0\n8.5\n7.7\n9.5\n8.5\n7.8\n9.9\n6.1\n8.1\n8.0\n8.8\n9.2\n8.4\n7.7\n\n\n\n\n\n\n\n\n\n\n\n# 엑셀 파일로 내보내기\ndf.to_excel('C:/Users/USER/Documents/LS빅데이터스쿨/PORTFOLIO/pre_data/pre_select.xlsx', index=False)"
  },
  {
    "objectID": "pjts/project1-4/index.html#데이터-시각화",
    "href": "pjts/project1-4/index.html#데이터-시각화",
    "title": "Project1-4.여행을 선택하는 이유",
    "section": "데이터 시각화",
    "text": "데이터 시각화\n\n1. 년도별 여행지 선택 5순위\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\n# 한글 설정\nplt.rcParams['font.family'] ='Malgun Gothic'\nplt.rcParams['axes.unicode_minus'] =False\n\ndf = pd.read_excel(\"C:/Users/USER/Documents/LS빅데이터스쿨/PORTFOLIO/pre_data/pre_select.xlsx\")\ndf\n\ndf_2018 = df.loc[0:14]\ndf_2019 = df.loc[15:29]\ndf_2020 = df.loc[30:44]\ndf_2021 = df.loc[45:59]\ndf_2022 = df.loc[60:74]\n\ntotal_2018 = df_2018.sort_values(\"total\", ascending = False).head()\ntotal_2019 = df_2019.sort_values(\"total\", ascending = False).head()\ntotal_2020 = df_2020.sort_values(\"total\", ascending = False).head()\ntotal_2021 = df_2021.sort_values(\"total\", ascending = False).head()\ntotal_2022 = df_2022.sort_values(\"total\", ascending = False).head()\n\ntotal_all = pd.concat([total_2018, total_2019, total_2020, total_2021, total_2022]).iloc[:, :3]\ntotal_all_pivot = total_all.pivot(index='year', columns='item', values='total')\n\n\nfig = px.bar(total_all_pivot, title='년도별 여행지 선택 5순위', labels={'value': '총합', 'year': '년도'})\n# 레이아웃 설정\nfig.update_layout(\n    xaxis_title='년도',\n    yaxis_title='총합',\n    legend_title_text='Item',\n    legend=dict(\n        x=1,  # x 위치 (1은 그래프의 가장 오른쪽)\n        y=1,  # y 위치 (1은 그래프의 가장 위쪽)\n        xanchor='left',  # x 기준점\n        yanchor='top'  # y 기준점\n    )\n)\n\nfig.show()\n\n                                                \n\n\n\n\n2. 여행을 선택하는 이유\n\nfrom matplotlib.ticker import MaxNLocator\n\n#선 그래프\nvisualappeal = total_all.query(\"item == '볼거리 제공'\")\nPopularity = total_all.query(\"item == '여행지 지명도'\")\ntime = total_all.query(\"item == '여행할 수 있는 시간'\")\n\n\n# 선 그래프 생성\nplt.figure(figsize=(10, 6))\nplt.plot(visualappeal[\"year\"], visualappeal[\"total\"], marker='o',label=\"볼거리 제공\")\nplt.plot(Popularity[\"year\"], Popularity[\"total\"], marker='o',label=\"여행지 지명도\")\nplt.plot(time[\"year\"], time[\"total\"], marker='o',label=\"여행할 수 있는 시간\")\n\n\n# 그래프에 제목과 축 레이블 추가\nplt.title(\"여행을 선택하는 이유 - 전체\")\nplt.xlabel(\"년도\")\nplt.ylabel(\"전체 %\")\nplt.legend(fontsize='x-small',loc='center left')\nplt.gca().xaxis.set_major_locator(MaxNLocator(integer=True))\nplt.show()"
  },
  {
    "objectID": "pjts/project1-2/index.html#데이터-전처리",
    "href": "pjts/project1-2/index.html#데이터-전처리",
    "title": "Project1-2. 지역별 관광지 검색 순위",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\n\ntour_2018 = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/PORTFOLIO/data/ranking_2018.csv', encoding='cp949')\ntour_2019 = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/PORTFOLIO/data/ranking_2019.csv', encoding='cp949')\ntour_2020 = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/PORTFOLIO/data/ranking_2020.csv', encoding='cp949')\ntour_2021 = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/PORTFOLIO/data/ranking_2021.csv', encoding='cp949')\ntour_2022 = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/PORTFOLIO/data/ranking_2022.csv', encoding='cp949')\n\n\n\n\n\nrename_dict = {'순위': 'ranking', '광역시/도': 'state', '시/군/구': 'city', '관광지명': 'spot',\n               '도로명주소': 'address', '중분류 카테고리': 'category_m', '소분류 카테고리': 'category_s', '검색건수': 'search_count'}\n\ntour_2018.rename(columns=rename_dict, inplace=True)\ntour_2019.rename(columns=rename_dict, inplace=True)\ntour_2020.rename(columns=rename_dict, inplace=True)\ntour_2021.rename(columns=rename_dict, inplace=True)\ntour_2022.rename(columns=rename_dict, inplace=True)\n\n\n\n\n\ncate_remove = ['교통시설', '면세점', '백화점', '쇼핑몰', '대형마트', '기타쇼핑시설']\n\n# 각 연도별 데이터에서 'cate_remove' 목록에 해당하는 카테고리를 제거\ntour_2018 = tour_2018[~tour_2018['category_s'].isin(cate_remove)]\ntour_2019 = tour_2019[~tour_2019['category_s'].isin(cate_remove)]\ntour_2020 = tour_2020[~tour_2020['category_s'].isin(cate_remove)]\ntour_2021 = tour_2021[~tour_2021['category_s'].isin(cate_remove)]\ntour_2022 = tour_2022[~tour_2022['category_s'].isin(cate_remove)]\n\n\n\n\n\ntour_2018['year'] = 2018\ntour_2019['year'] = 2019\ntour_2020['year'] = 2020\ntour_2021['year'] = 2021\ntour_2022['year'] = 2022\n\n\n\n\n\ntours = [tour_2018, tour_2019, tour_2020, tour_2021, tour_2022]\ntour_total = pd.concat(tours, ignore_index=True)\n\n# 불필요한 열 삭제\ntour_total.drop(columns=['address', 'ranking'], inplace=True)\n\n\n\n\n\ntour_total['combined_city'] = tour_total['state'] + \" \" + tour_total['city']\n\n# 결과 확인\ntour_total.info()\nprint(tour_total.head())  \nprint(tour_total['category_s'].unique())  # 카테고리 확인\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 1373 entries, 0 to 1372\nData columns (total 8 columns):\n #   Column         Non-Null Count  Dtype \n---  ------         --------------  ----- \n 0   state          1373 non-null   object\n 1   city           1373 non-null   object\n 2   spot           1373 non-null   object\n 3   category_m     1373 non-null   object\n 4   category_s     1373 non-null   object\n 5   search_count   1373 non-null   int64 \n 6   year           1373 non-null   int64 \n 7   combined_city  1373 non-null   object\ndtypes: int64(2), object(6)\nmemory usage: 85.9+ KB\n   state     city         spot category_m category_s  search_count  year  \\\n0  서울특별시      강남구          코엑스       문화관광       전시시설        456473  2018   \n1    경기도  용인시 처인구         에버랜드       문화관광       테마공원        330266  2018   \n2  서울특별시      동작구      노량진수산시장         쇼핑         시장        251985  2018   \n3  서울특별시      송파구  가락동농수산물도매시장         쇼핑         시장        231899  2018   \n4  서울특별시      용산구   CGV용산아이파크몰       문화관광       공연시설        227562  2018   \n\n  combined_city  \n0     서울특별시 강남구  \n1   경기도 용인시 처인구  \n2     서울특별시 동작구  \n3     서울특별시 송파구  \n4     서울특별시 용산구  \n['전시시설' '테마공원' '시장' '공연시설' '자연경관(하천/해양)' '역사유적지' '도시공원' '기타문화관광지' '기타관광'\n '종교성지' '자연생태' '레저스포츠시설' '랜드마크관광' '자연경관(산)' '복합관광시설' '자연공원' '육상레저스포츠'\n '기타레저스포츠' '웰니스관광' '농/산/어촌체험' '자연관광(산)' '데이트코스' '수상레저스포츠']\n\n\n\n\n\n\n# 전처리 파일 저장\ntour_total.to_excel('C:/Users/USER/Documents/LS빅데이터스쿨/PORTFOLIO/pre_data/total_tour.xlsx', index=False)"
  },
  {
    "objectID": "pjts/project1-2/index.html#데이터-시각화",
    "href": "pjts/project1-2/index.html#데이터-시각화",
    "title": "Project1-2. 지역별 관광지 검색 순위",
    "section": "데이터 시각화",
    "text": "데이터 시각화\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib as plt\n\ntour_total = pd.read_csv('C:/Users/USER/Documents/LS빅데이터스쿨/PORTFOLIO/pre_data/total_tour.csv', encoding = 'cp949')\n\nimport matplotlib.pyplot as plt\nplt.rcParams['font.family'] ='Malgun Gothic'\nplt.rcParams['axes.unicode_minus'] =False\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_6032\\3780840232.py:5: DtypeWarning:\n\nColumns (1,2,3,4,5,6,9) have mixed types. Specify dtype option on import or set low_memory=False.\n\n\n\n\n1. 각 연도별 TOP3 관광지 구하기\n\n# Top 3 순위 구하기\ntour_total_rank = tour_total.groupby(\"spot\")\\\n                            .agg(mean = (\"search_count\",\"mean\"))\n        \ntour_total_rank.sort_values([\"mean\"], ascending=False)\n\n# 그래프 그리기\nfrom matplotlib.ticker import MaxNLocator\n\nranking1 = tour_total.query(\"spot=='에버랜드'\")\nranking2 = tour_total.query(\"spot=='속초관광수산시장'\")\nranking3 = tour_total.query(\"spot=='코엑스'\")\n\nplt.clf()\n\nplt.plot(ranking1[\"year\"], ranking1[\"search_count\"], marker='o', label=\"에버랜드\")\nplt.plot(ranking2[\"year\"], ranking2[\"search_count\"], marker='o', label='속초관광수산시장')\nplt.plot(ranking3[\"year\"], ranking3[\"search_count\"], marker='o', label='코엑스')\n\nplt.gca().xaxis.set_major_locator(MaxNLocator(integer=True))\nplt.title('상위 3개 관광지 5년 추이')\nplt.xlabel('년도')\nplt.ylabel('검색수')\nplt.legend(title='Spot', bbox_to_anchor=(1.05, 1), loc='upper left', prop={'size': 10})\nplt.grid(True)\nplt.tight_layout()\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n2. 각 연도별 TOP3 관광지 중분류 구하기\n\n# 중분류 수정본\n# tour_total[\"year\"] = tour_total[\"year\"].astype(int)\n# Top 3 순위 구하기\ntour_total_c = tour_total.groupby(\"category_m\")\\\n                            .agg(c_sum = (\"search_count\",\"sum\"))\n        \ntour_total_c.sort_values([\"c_sum\"], ascending=False)\n\n# 그래프 그리기\nfrom matplotlib.ticker import MaxNLocator\n\ntour_total_c2 = tour_total.groupby([\"year\",\"category_m\"], as_index=False)\\\n                            .agg(category_sum = (\"search_count\",\"sum\"))\n\n\n\nranking4 = tour_total_c2.query(\"category_m=='쇼핑'\")\n\nranking5 = tour_total_c2.query(\"category_m=='자연관광'\")\n\nranking6 = tour_total_c2.query(\"category_m=='문화관광'\")\n\n\nplt.clf()\n\nplt.plot(ranking4[\"year\"], ranking4[\"category_sum\"], marker='o', label=\"쇼핑\")\nplt.plot(ranking5[\"year\"], ranking5[\"category_sum\"], marker='o', label='자연관광')\nplt.plot(ranking6[\"year\"], ranking6[\"category_sum\"], marker='o', label='문화관광')\n\nplt.gca().xaxis.set_major_locator(MaxNLocator(integer=True))\nplt.title('상위 3개 관광지 중분류 5년 추이')\nplt.xlabel('년도')\nplt.ylabel('검색수 (단위: 천만 회)')\nplt.legend(title='Spot', bbox_to_anchor=(1.05, 1), loc='upper left', prop={'size': 10})\nplt.grid(True)\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "pjts/project1-3/index.html#데이터-시각화",
    "href": "pjts/project1-3/index.html#데이터-시각화",
    "title": "Project1-3. 국내 여행 횟수",
    "section": "데이터 시각화",
    "text": "데이터 시각화\n\n# 라이브러리 호출\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\n# 전처리 된 데이터 불러오기\np_num_trip = pd.read_excel('C:/Users/USER/Documents/LS빅데이터스쿨/PORTFOLIO/pre_data/p_num_trip.xlsx')\n\n\n# 분석을 용이하게 하기 위해 query()를 사용하여 각 년도별 행을 추출하여 DataFrame생성\ny2018 = p_num_trip.query('year == 2018')\ny2019 = p_num_trip.query('year == 2019')\ny2020 = p_num_trip.query('year == 2020')\ny2021 = p_num_trip.query('year == 2021')\ny2022 = p_num_trip.query('year == 2022')\n\n# 그래프에 한글 출력 가능하게 하기 위해 rcParams(runtimeconfiguration) 딕셔너리 설정\nplt.rcParams['font.family'] ='Malgun Gothic'\n\n\n1. 2018년도 ~ 2022년도 5년간 연령별 여행 횟수 트랜드 구하기\n\n# 그래프의 x축과 y축의 데이터 값 만들기\n# for x in range 구문을 이용하여 다음과 같은 반복문을 실행, 년간 연령대 별 여행 횟수의 합을 구하는 것을 2018년부터 2022년까지 반복한다.\nteens_total = [x['teens'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nyoung_adults_total = [x['young_adults'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nmiddle_adults_total = [x['middle_adults'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nseniors_adults_total = [x['seniors'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nyears = [2018,2019,2020,2021,2022]\n\n# title(), ylabel(), xlabel()을 사용하여 그래프의 제목과 x, y축 레이블 설정\nplt.title(\"2018년 ~ 2022년 연령대 별 여행 횟수\")\nplt.ylabel(\"단위 : 천회\")\nplt.xlabel(\"단위 : 년\")\n\n# 그래프 그리기\n# x_range : year의 길이 만큼 x축의 범위를 설정\n# x_range + c : 그래프가 그려지는 위치값을 조절\n# width : 그래프의 너비 설정\n# label : 범례 표시\n# color : 그래프의 색상 표시\nx_range = np.arange(len(years))\nplt.bar(x_range+0.0, teens_total, width=0.2, label='청소년(15~19세)', color = 'lawngreen')\nplt.bar(x_range+0.2, young_adults_total, width=0.2, label='청년(2~30대)', color = 'blue')\nplt.bar(x_range+0.4, middle_adults_total, width=0.2, label='중년(4~50대)', color = 'red')\nplt.bar(x_range+0.6, seniors_adults_total, width=0.2, label='노년(6~70대 이상)', color = 'gray')\n\n# x축 눈금 설정\n# x_ticks()을 사용하여 x_range(0~0.6)의 중간(0.3)으로 눈금의 위치를 옮기고, 각 해당 위치에 해당하는 레이블을 years로 지정하여 년도가 함께 표시되도록 지정\nplt.xticks(x_range+0.3, years)\n\n# legend()를 사용하여 범례 추가\nplt.legend()\n\n# 그래프 보여주기\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n2. 2018년도 ~ 2022년도 5년간 가구원 수 별 여행 횟수 트랜드 구하기\n\n# 그래프의 x축과 y축의 데이터 값 만들기\n# for x in range 구문을 이용하여 다음과 같은 반복문을 실행, 년간 가구원 수 별 여행 횟수의 합을 구하는 것을 2018년부터 2022년까지 반복한다.\nper1_total = [x['per1'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nper2_total = [x['per2'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nper3_total = [x['per3+'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nyears = [2018,2019,2020,2021,2022]\n\n# title(), ylabel(), xlabel()을 사용하여 그래프의 제목과 x, y축 레이블 설정\nplt.title(\"2018년 ~ 2022년 가구원 수 별 여행 횟수\")\nplt.ylabel(\"단위 : 천회\")\nplt.xlabel(\"단위 : 년\")\n\n# 그래프 그리기\n# x_range : year의 길이 만큼 x축의 범위를 설정\n# x_range + c : 그래프가 그려지는 위치값을 조절\n# width : 그래프의 너비 설정\n# label : 범례 표시\n# color : 그래프의 색상 표시\nx_range = np.arange(len(years))\nplt.bar(x_range+0.0, per1_total, width=0.2, label='1인 가구', color = 'slateblue')\nplt.bar(x_range+0.2, per2_total, width=0.2, label='2인 가구', color = 'coral')\nplt.bar(x_range+0.4, per3_total, width=0.2, label='3인 이상 가구', color = 'teal')\n\n# x축 눈금 설정\n# x_ticks()을 사용하여 x_range(0~0.4)의 중간(0.2)으로 눈금의 위치를 옮기고, 각 해당 위치에 해당하는 레이블을 years로 지정하여 년도가 함께 표시되도록 지정\nplt.xticks(x_range+0.2, years) \n\n# 범례추가\nplt.legend()\n\n# 그래프 보여주기\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;"
  },
  {
    "objectID": "posts/hw6/index.html",
    "href": "posts/hw6/index.html",
    "title": "LS 빅데이터 스쿨 homework6",
    "section": "",
    "text": "슬통 자동자는 매해 출시되는 신형 자동차의 에너지 소비효율 등급을 1등급으로 유지하고 있다. 22 년 개발된 신형 모델이 한국 자동차 평가원에서 설정한 에너지 소비 효율등급 1등급을 받을 수 있을지 검정하려한다. 평가원에 따르면 1등급의 기준은 평균 복합 에너지 소비효율이 16.0 이상인 경우 부여 한다고 한다. 다음% 신형 자동차 15대의 복합 에너지소비효율 측정한 결과이다. 15.078, 15.752, 15.549, 15.56, 16.098, 13.277, 15.462, 16.116, 15.214, 16.93, 14.118, 14.927, 15.382, 16.709, 16.804 표본에 의하여 판단해볼때, 현대자동차의 신형 모델은 에너지 효율 1등급으로 판단할 수 있을지 판단해보시오. (유의수준 1%로 설정)\n\n\n귀무가설(H0) : 평균 복합 에너지 소비효율이 16.0이상일 것이다. H0 : mu &gt;= 16\n대립가설(H1) : 평균 복합 에너지 소비효율은 16.0미만일 것이다. H1 : mu &lt; 16\n\n\n\n\nimport numpy as np\n\nx=np.array([15.078, 15.752, 15.549, 15.56, 16.098, 13.277, 15.462, 16.116, 15.214, 16.93, 14.118, 14.927, 15.382, 16.709, 16.804])\nn=15\nx_bar = x.mean()\nx_std = np.std(x,ddof=1) # np.var(x,ddof=1)\nt= (x_bar-16)/(x_std/np.sqrt(n))\nprint(\"검정통계량: \",t)\n\n검정통계량:  -1.8500447456376756\n\n\n\n\n\n\nfrom scipy.stats import norm\npvalue=norm.cdf(t, loc=0, scale=1)\nprint(\"유의확률(p-value): \",pvalue)\n\n유의확률(p-value):  0.03215355034031973\n\n\n\n\n\n\n#6 신뢰구간\nfrom scipy.stats import t\nupper = x_bar + t.ppf(0.95, df=n-1) * np.std(x,ddof=1) / np.sqrt(n)\nlower = x_bar - t.ppf(0.95, df=n-1) * np.std(x,ddof=1) / np.sqrt(n)\nprint(\"신뢰구간 상한값: \",upper)\nprint(\"신뢰구간 하한값: \",lower)\n\n신뢰구간 상한값:  15.977540294592114\n신뢰구간 하한값:  15.085926372074553\n\n\n\n\n\n유의확률(p-value)이 0.0322로, 유의수준 0.01보다 크므로 귀무가설 채택 -&gt; 평균 복합 에너지 소비효율이 16.0이상일 것이다. -&gt; 현대자동차의 신형 모델은 에너지 효율 1등급으로 판단할 수 있다."
  },
  {
    "objectID": "posts/hw6/index.html#검정을-위한-가설을-명확하게-서술하시오.",
    "href": "posts/hw6/index.html#검정을-위한-가설을-명확하게-서술하시오.",
    "title": "LS 빅데이터 스쿨 homework6",
    "section": "",
    "text": "귀무가설(H0) : 평균 복합 에너지 소비효율이 16.0이상일 것이다. H0 : mu &gt;= 16\n대립가설(H1) : 평균 복합 에너지 소비효율은 16.0미만일 것이다. H1 : mu &lt; 16"
  },
  {
    "objectID": "posts/hw6/index.html#검정통계량-계산하시오.",
    "href": "posts/hw6/index.html#검정통계량-계산하시오.",
    "title": "LS 빅데이터 스쿨 homework6",
    "section": "",
    "text": "import numpy as np\n\nx=np.array([15.078, 15.752, 15.549, 15.56, 16.098, 13.277, 15.462, 16.116, 15.214, 16.93, 14.118, 14.927, 15.382, 16.709, 16.804])\nn=15\nx_bar = x.mean()\nx_std = np.std(x,ddof=1) # np.var(x,ddof=1)\nt= (x_bar-16)/(x_std/np.sqrt(n))\nprint(\"검정통계량: \",t)\n\n검정통계량:  -1.8500447456376756"
  },
  {
    "objectID": "posts/hw6/index.html#p-value을-구하세요.",
    "href": "posts/hw6/index.html#p-value을-구하세요.",
    "title": "LS 빅데이터 스쿨 homework6",
    "section": "",
    "text": "from scipy.stats import norm\npvalue=norm.cdf(t, loc=0, scale=1)\nprint(\"유의확률(p-value): \",pvalue)\n\n유의확률(p-value):  0.03215355034031973"
  },
  {
    "objectID": "posts/hw6/index.html#현대자동차의-신형-모델의-평균-복합-에너지-소비효율에-대하여-95-신뢰구간을-구해보세요.",
    "href": "posts/hw6/index.html#현대자동차의-신형-모델의-평균-복합-에너지-소비효율에-대하여-95-신뢰구간을-구해보세요.",
    "title": "LS 빅데이터 스쿨 homework6",
    "section": "",
    "text": "#6 신뢰구간\nfrom scipy.stats import t\nupper = x_bar + t.ppf(0.95, df=n-1) * np.std(x,ddof=1) / np.sqrt(n)\nlower = x_bar - t.ppf(0.95, df=n-1) * np.std(x,ddof=1) / np.sqrt(n)\nprint(\"신뢰구간 상한값: \",upper)\nprint(\"신뢰구간 하한값: \",lower)\n\n신뢰구간 상한값:  15.977540294592114\n신뢰구간 하한값:  15.085926372074553"
  },
  {
    "objectID": "posts/hw6/index.html#결론",
    "href": "posts/hw6/index.html#결론",
    "title": "LS 빅데이터 스쿨 homework6",
    "section": "",
    "text": "유의확률(p-value)이 0.0322로, 유의수준 0.01보다 크므로 귀무가설 채택 -&gt; 평균 복합 에너지 소비효율이 16.0이상일 것이다. -&gt; 현대자동차의 신형 모델은 에너지 효율 1등급으로 판단할 수 있다."
  },
  {
    "objectID": "posts/index.html",
    "href": "posts/index.html",
    "title": "Blog",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nLS 빅데이터 스쿨 homework6\n\n\n\nAug 5, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLS 빅데이터 스쿨 homework5\n\n\n\nJul 30, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLS 빅데이터 스쿨 homework4\n\n\n\nJul 29, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLS 빅데이터 스쿨 homework3\n\n\n\nJul 25, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLS 빅데이터 스쿨 homework_etc\n\n\n\nJul 22, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLS 빅데이터 스쿨 homework2\n\n\n\nJul 16, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLS 빅데이터 스쿨 homework1\n\n\n\nJul 15, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  }
]